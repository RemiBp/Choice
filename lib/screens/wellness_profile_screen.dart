import 'package:flutter/material.dart';
import '../utils/translation_helper.dart';import 'package:google_fonts/google_fonts.dart'; import 'package:cached_network_image/cached_network_image.dart'; import '../services/wellness_service.dart'; import '../models/wellness_producer.dart'; import 'package:shared_preferences/shared_preferences.dart'; import 'package:url_launcher/url_launcher.dart'; import 'package:google_maps_flutter/google_maps_flutter.dart'; import '../utils/api_config.dart';  class WellnessProfileScreen extends StatefulWidget {   final String producerId;    const WellnessProfileScreen({     Key? key,     required this.producerId,   }) : super(key: key);    @override   _WellnessProfileScreenState createState() => _WellnessProfileScreenState(); }  class _WellnessProfileScreenState extends State<WellnessProfileScreen> {   final WellnessService _wellnessService = WellnessService();   WellnessProducer? _producer;   bool _isLoading = true;   String? _error;    @override   void initState() {     super.initState();     _loadProducer();   }    Future<void> _loadProducer() async {     try {       setState(() {         _isLoading = true;         _error = null;       });        final producer = await _wellnessService.getProducerById(widget.producerId);       setState(() {         _producer = producer;         _isLoading = false;       });     } catch (e) {       setState(() {         _error = e.toString();         _isLoading = false;       });     }   }    Future<void> _launchUrl(String url) async {     if (await canLaunch(url)) {       await launch(url);     } else {       ScaffoldMessenger.of(context).showSnackBar(         const SnackBar(content: Text('Impossible d\'ouvrir le lien')),       );     }   }    Future<void> _launchMaps(double lat, double lng) async {     final url = 'https://www.google.com/maps/search/?api=1&query=$lat,$lng';     if (await canLaunch(url)) {       await launch(url);     } else {       ScaffoldMessenger.of(context).showSnackBar(         const SnackBar(content: Text('Impossible d\'ouvrir Google Maps')),       );     }   }    @override   Widget build(BuildContext context) {     if (_isLoading) {       return const Scaffold(         body: Center(           child: CircularProgressIndicator(),         ),       );     }      if (_error != null) {       return Scaffold(         body: Center(           child: Column(             mainAxisAlignment: MainAxisAlignment.center,             children: [               Text(                 'Erreur: $_error',                 style: const TextStyle(color: Colors.red),               ),               const SizedBox(height: 16),               ElevatedButton(                 onPressed: _loadProducer,                 child: const Text('Réessayer'),               ),             ],           ),         ),       );     }      if (_producer == null) {       return const Scaffold(         body: Center(           child: Text('Producteur non trouvé'),         ),       );     }      return Scaffold(       body: CustomScrollView(         slivers: [           SliverAppBar(             expandedHeight: 200,             pinned: true,             flexibleSpace: FlexibleSpaceBar(               background: Image.network(                 _producer!.profilePhoto,                 fit: BoxFit.cover,               ),             ),           ),           SliverToBoxAdapter(             child: Padding(               padding: const EdgeInsets.all(16),               child: Column(                 crossAxisAlignment: CrossAxisAlignment.start,                 children: [                   Text(                     _producer!.name,                     style: Theme.of(context).textTheme.headlineMedium,                   ),                   const SizedBox(height: 8),                   _buildCategoryInfo(),                   const SizedBox(height: 16),                   Text(                     _producer!.description,                     style: Theme.of(context).textTheme.bodyLarge,                   ),                   const SizedBox(height: 24),                   _buildSection(                     'Informations de contact',                     [                       _buildInfoRow(Icons.location_on, _producer!.address),                       _buildLocationInfo(),                       _buildInfoRow(Icons.phone, _producer!.phone),                       _buildInfoRow(Icons.email, _producer!.email),                       if (_producer!.website.isNotEmpty)                         _buildInfoRow(Icons.web, _producer!.website),                     ],                   ),                   const SizedBox(height: 24),                   _buildSection(                     'Services proposés',                     _producer!.services.map((service) => Text(service)).toList(),                   ),                   const SizedBox(height: 24),                   _buildMap(),                   if (_producer!.photos.isNotEmpty) ...[                     const SizedBox(height: 24),                     _buildSection(                       'Galerie photos',                       [                         SizedBox(                           height: 200,                           child: ListView.builder(                             scrollDirection: Axis.horizontal,                             itemCount: _producer!.photos.length,                             itemBuilder: (context, index) {                               return Padding(                                 padding: const EdgeInsets.only(right: 8),                                 child: Image.network(                                   _producer!.photos[index],                                   fit: BoxFit.cover,                                   width: 200,                                 ),                               );                             },                           ),                         ),                       ],                     ),                   ],                   if (_producer!.notes.isNotEmpty) ...[                     const SizedBox(height: 24),                     _buildNotes(),                   ],                 ],               ),             ),           ),         ],       ),     );   }    Widget _buildSection(String title, List<Widget> children) {     return Column(       crossAxisAlignment: CrossAxisAlignment.start,       children: [         Text(           title,           style: Theme.of(context).textTheme.titleLarge,         ),         const SizedBox(height: 8),         ...children,       ],     );   }    Widget _buildInfoRow(IconData icon, String text) {     return Padding(       padding: const EdgeInsets.symmetric(vertical: 4),       child: Row(         children: [           Icon(icon, size: 20),           const SizedBox(width: 8),           Expanded(             child: Text(text),           ),         ],       ),     );   }    Widget _buildCategoryInfo() {     return Text(       '${_producer!.category} - ${_producer!.sous_categorie}',       style: TextStyle(         fontSize: 16,         color: Colors.grey[600],       ),     );   }    Widget _buildLocationInfo() {     return _buildInfoRow(       Icons.location_city,       '${_producer!.city} ${_producer!.postalCode}',     );   }    Widget _buildMap() {     return Container(       height: 200,       margin: const EdgeInsets.symmetric(vertical: 16),       decoration: BoxDecoration(         borderRadius: BorderRadius.circular(12),         border: Border.all(color: Colors.grey[300]!),       ),       child: ClipRRect(         borderRadius: BorderRadius.circular(12),         child: GoogleMap(           initialCameraPosition: CameraPosition(             target: LatLng(               _producer!.location['latitude'] ?? 48.8566,               _producer!.location['longitude'] ?? 2.3522,             ),             zoom: 15,           ),           markers: {             Marker(               markerId: MarkerId(_producer!.id),               position: LatLng(                 _producer!.location['latitude'] ?? 48.8566,                 _producer!.location['longitude'] ?? 2.3522,               ),               infoWindow: InfoWindow(                 title: _producer!.name,                 snippet: _producer!.address,               ),             ),           },           onTap: (LatLng position) {             _launchMaps(               _producer!.location['latitude'] ?? 48.8566,               _producer!.location['longitude'] ?? 2.3522,             );           },         ),       ),     );   }    Widget _buildNotes() {     return Column(       crossAxisAlignment: CrossAxisAlignment.start,       children: [         Text(           'Notes',           style: TextStyle(             fontSize: 18,             fontWeight: FontWeight.bold,           ),         ),         const SizedBox(height: 8),         Text(_producer!.notes.toString()),       ],     );   } } 
