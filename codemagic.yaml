workflows:
  android-release:
    name: Android Release Build
    instance_type: linux_x2
    max_build_duration: 120
    environment:
      flutter: stable
      android_signing:
        - choice-keystore
      groups:
        - google_play
        - choice_app_env
      vars:
        PACKAGE_NAME: "fr.choiceapp.app"
    scripts:
      - name: Configurer le fichier .env pour le build
        script: |
          echo "G√©n√©ration du fichier .env pour l'environnement de build..."
          # R√©cup√©rer le chemin du r√©pertoire du projet
          PROJECT_DIR=$(pwd)
          
          # S'assurer que le r√©pertoire frontend existe
          if [ -d "frontend" ]; then
            # Si le r√©pertoire frontend existe, on y acc√®de
            cd frontend
            FRONTEND_DIR=$(pwd)
          else
            # Si on est d√©j√† dans frontend ou il n'existe pas
            FRONTEND_DIR=$(pwd)
          fi
          
          # S'assurer que le r√©pertoire assets/env existe
          mkdir -p "$FRONTEND_DIR/assets/env"
          
          # Cr√©er directement le fichier dans assets/env/
          echo "Cr√©ation du fichier d'environnement dans: $FRONTEND_DIR/assets/env"
          cat > "$FRONTEND_DIR/assets/env/production.env" << EOL
          # Configuration du serveur
          PORT=5000
          NODE_ENV=production
          
          # Configuration de MongoDB
          MONGO_URI=$CM_MONGO_URI
          
          # Configuration JWT
          JWT_SECRET=$CM_JWT_SECRET
          
          # Configuration des uploads
          UPLOAD_DIR=uploads
          MAX_FILE_SIZE=5242880
          
          # Configuration des APIs externes
          GOOGLE_MAPS_API_KEY=$CM_GOOGLE_MAPS_API_KEY
          STRIPE_SECRET_KEY=$CM_STRIPE_SECRET_KEY
          STRIPE_WEBHOOK_SECRET=$CM_STRIPE_WEBHOOK_SECRET
          OPENAI_API_KEY=$CM_OPENAI_API_KEY
          
          # Base URL pour l'API
          API_BASE_URL=https://api.choiceapp.fr
          WEBSOCKET_URL=wss://api.choiceapp.fr
          EOL
          
          # Copier aussi dans default.env pour √™tre s√ªr
          cp "$FRONTEND_DIR/assets/env/production.env" "$FRONTEND_DIR/assets/env/default.env"
          
          echo "‚úÖ Fichiers d'environnement cr√©√©s avec succ√®s pour l'environnement de build"
          
          # V√©rifier que les fichiers existent et afficher leur taille
          if [ -f "$FRONTEND_DIR/assets/env/default.env" ] && [ -f "$FRONTEND_DIR/assets/env/production.env" ]; then
            echo "üîç Les fichiers d'environnement ont √©t√© cr√©√©s correctement:"
            ls -la "$FRONTEND_DIR/assets/env/"
            # Afficher uniquement les noms des variables (pas les valeurs)
            grep -o "^[A-Z_]*=" "$FRONTEND_DIR/assets/env/default.env" | sort
            
            # V√©rifier que les fichiers sont accessibles
            if [ -r "$FRONTEND_DIR/assets/env/default.env" ]; then
              echo "‚úÖ Les fichiers d'environnement sont lisibles"
            else
              echo "‚ö†Ô∏è Les fichiers d'environnement ne sont pas lisibles"
            fi
            
            # Retourner au r√©pertoire du projet
            cd "$PROJECT_DIR"
          else
            echo "‚ùå Erreur: Fichiers d'environnement non cr√©√©s"
            cd "$PROJECT_DIR"
            exit 1
          fi

      - name: Verify asset in pubspec.yaml
        script: |
          # V√©rifier que .env est correctement d√©clar√© dans le pubspec.yaml
          if [ -d "frontend" ]; then
            PUBSPEC_FILE="frontend/pubspec.yaml"
          else
            PUBSPEC_FILE="pubspec.yaml"
          fi
          
          if [ -f "$PUBSPEC_FILE" ]; then
            if grep -q "assets:" "$PUBSPEC_FILE" && grep -q "- .env" "$PUBSPEC_FILE"; then
              echo "‚úÖ .env est correctement d√©clar√© comme asset dans pubspec.yaml"
            else
              echo "‚ö†Ô∏è .env n'est peut-√™tre pas correctement d√©clar√© comme asset dans pubspec.yaml"
              echo "Contenu de la section assets:"
              grep -A 10 "assets:" "$PUBSPEC_FILE"
            fi
          else
            echo "‚ùå Fichier pubspec.yaml non trouv√©: $PUBSPEC_FILE"
          fi

      - name: Clean and Get Dependencies
        script: |
          # Nettoyer et r√©parer
          flutter clean
          flutter pub cache repair
          
          # V√©rifier les versions de flutter_map et flutter_map_marker_cluster
          if grep -q "flutter_map: \^8.0.0" pubspec.yaml; then
            # Ajuster la version de flutter_map pour la compatibilit√©
            sed -i 's/flutter_map: \^8.0.0/flutter_map: \^7.0.0/g' pubspec.yaml
            echo "‚úì Flutter Map ajust√© √† ^7.0.0 pour compatibilit√© avec marker_cluster"
          fi
          
          if grep -q "flutter_map_marker_cluster: \^1.3.4" pubspec.yaml; then
            # Mettre √† jour flutter_map_marker_cluster pour compatibilit√© avec flutter_map ^7.0.0
            sed -i 's/flutter_map_marker_cluster: \^1.3.4/flutter_map_marker_cluster: \^1.4.0/g' pubspec.yaml
            echo "‚úì Flutter Map Marker Cluster mis √† jour √† ^1.4.0"
          fi
          
          # Force des URLs HTTPS pour les d√©pendances Git
          git config --global url."https://".insteadOf "git://"
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          
          # Obtenir les d√©pendances proprement
          flutter pub get --verbose
          
          # S'assurer que les assets/env existent dans le r√©pertoire de build
          mkdir -p build/app/intermediates/flutter/release/assets/env/
          
          # Copier les fichiers d'environnement dans le r√©pertoire de build
          if [ -d "assets/env" ]; then
            cp -r assets/env/* build/app/intermediates/flutter/release/assets/env/
            echo "‚úÖ Fichiers d'environnement copi√©s vers le r√©pertoire de build"
            ls -la build/app/intermediates/flutter/release/assets/env/
          else
            echo "‚ö†Ô∏è R√©pertoire assets/env non trouv√© pour la copie"
          fi

      - name: Fix Android Configuration
        script: |
          # V√©rifier et corriger les niveaux d'API Android
          GRADLE_FILE="android/app/build.gradle"
          if grep -q "compileSdkVersion 35" "$GRADLE_FILE"; then
            sed -i 's/compileSdkVersion 35/compileSdkVersion 34/g' "$GRADLE_FILE"
            sed -i 's/targetSdkVersion 35/targetSdkVersion 34/g' "$GRADLE_FILE"
            echo "‚úì Niveaux d'API Android corrig√©s (35 -> 34)"
          fi
          
          # V√©rifier GradleException et remplacer si n√©cessaire
          if grep -q "throw new GradleException" "$GRADLE_FILE"; then
            sed -i 's/throw new GradleException/throw new RuntimeException/g' "$GRADLE_FILE"
            echo "‚úì GradleException remplac√© par RuntimeException"
          fi
          
          # Ajouter les permissions internet dans le manifeste si n√©cessaire
          MANIFEST_FILE="android/app/src/main/AndroidManifest.xml"
          if [ -f "$MANIFEST_FILE" ] && ! grep -q "android.permission.INTERNET" "$MANIFEST_FILE"; then
            sed -i '/<uses-permission/a \    <uses-permission android:name="android.permission.INTERNET" />' "$MANIFEST_FILE"
            echo "‚úì Permission internet ajout√©e"
          fi

      - name: V√©rification de Compatibilit√© Web
        script: |
          echo "V√©rification de la configuration pour le web..."
          
          # V√©rifier la pr√©sence du fichier adaptatif pour les cartes
          MAP_UTIL_DIR="lib/widgets/maps"
          if [ ! -d "$MAP_UTIL_DIR" ]; then
            mkdir -p "$MAP_UTIL_DIR"
          fi
          
          # V√©rifier que les d√©pendances n√©cessaires sont activ√©es pour le web
          WEB_INDEX="web/index.html"
          if [ -f "$WEB_INDEX" ] && ! grep -q "openstreetmap" "$WEB_INDEX"; then
            # Ajouter le lien vers la feuille de style OpenStreetMap si n√©cessaire
            sed -i '/<\/head>/i \  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>' "$WEB_INDEX"
            echo "‚úì Feuille de style Leaflet ajout√©e pour le web"
          fi

      - name: Build Android Bundle
        script: |
          # Construire le bundle Android
          flutter build appbundle --release
          
          # V√©rifier si le build a r√©ussi
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "‚úÖ Build Android r√©ussi!"
          else
            echo "‚ùå Build Android √©chou√©"
            exit 1
          fi

      - name: Verify bundle structure (debug)
        script: |
          echo "V√©rification de la structure du bundle..."
          # V√©rifier les assets interm√©diaires
          if [ -d "build/app/intermediates/flutter/release/assets/env" ]; then
            echo "‚úÖ Dossier assets/env trouv√© dans le r√©pertoire des assets interm√©diaires"
            echo "Contenu du dossier assets/env:"
            ls -la build/app/intermediates/flutter/release/assets/env/
          else
            echo "‚ö†Ô∏è Dossier assets/env non trouv√© dans le r√©pertoire des assets interm√©diaires"
            echo "Contenu du r√©pertoire flutter/release:"
            find build/app/intermediates/flutter/release -type d | sort
          fi
          
          # Copier manuellement les fichiers d'environnement si n√©cessaire
          mkdir -p build/app/intermediates/flutter/release/assets/env
          if [ -f "assets/env/default.env" ]; then
            cp assets/env/default.env build/app/intermediates/flutter/release/assets/env/
            cp assets/env/production.env build/app/intermediates/flutter/release/assets/env/
            echo "‚úÖ Fichiers d'environnement copi√©s manuellement dans le r√©pertoire des assets interm√©diaires"
          else
            echo "‚ö†Ô∏è Impossible de trouver les fichiers d'environnement source pour la copie manuelle"
          fi
          
          # Utiliser l'outil bundletool pour analyser le bundle
          echo "Extraction du contenu du bundle pour v√©rification..."
          mkdir -p bundle_analysis
          if [ -f "${ANDROID_HOME}/cmdline-tools/latest/bin/bundletool" ]; then
            BUNDLETOOL="${ANDROID_HOME}/cmdline-tools/latest/bin/bundletool"
          else
            # T√©l√©charger bundletool si n√©cessaire
            if [ ! -f "bundletool.jar" ]; then
              echo "T√©l√©chargement de bundletool..."
              curl -L -o bundletool.jar https://github.com/google/bundletool/releases/download/1.15.6/bundletool-all-1.15.6.jar
            fi
            BUNDLETOOL="java -jar bundletool.jar"
          fi
          
          # Convertir le bundle en APKs pour l'inspection
          $BUNDLETOOL build-apks --bundle=build/app/outputs/bundle/release/app-release.aab --output=bundle_analysis/app.apks
          
          # Extraire les APKs pour l'inspection
          mkdir -p bundle_analysis/extracted
          unzip -q bundle_analysis/app.apks -d bundle_analysis/extracted
          
          # V√©rifier la pr√©sence de .env dans les assets
          echo "Recherche de .env dans les assets extraits..."
          find bundle_analysis -name "*.env" -type f

    artifacts:
      - build/app/outputs/bundle/release/app-release.aab

    publishing:
      email:
        recipients:
          - "remi.barbier@hec.edu"

  # Version sans signature de code (si jamais vous rencontrez √† nouveau des probl√®mes de profil)
  ios-release-unsigned:
    name: iOS Release Build (Unsigned)
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      flutter: stable
      xcode: latest
      cocoapods: latest
      groups:
        - choice_app_env
      vars:
        # Variables pour d√©sactiver compl√®tement la signature de code
        DISABLE_CODE_SIGNING: "true"
        ENABLE_MANUAL_PROVISIONING: "false"
    scripts:
      - name: Configurer le fichier .env pour le build
        script: |
          echo "G√©n√©ration du fichier .env pour l'environnement de build..."
          cat > .env << EOL
          # Configuration du serveur
          PORT=5000
          NODE_ENV=production
          
          # Configuration de MongoDB
          MONGO_URI=$CM_MONGO_URI
          
          # Configuration JWT
          JWT_SECRET=$CM_JWT_SECRET
          
          # Configuration des uploads
          UPLOAD_DIR=uploads
          MAX_FILE_SIZE=5242880
          
          # Configuration des APIs externes
          GOOGLE_MAPS_API_KEY=$CM_GOOGLE_MAPS_API_KEY
          STRIPE_SECRET_KEY=$CM_STRIPE_SECRET_KEY
          STRIPE_WEBHOOK_SECRET=$CM_STRIPE_WEBHOOK_SECRET
          OPENAI_API_KEY=$CM_OPENAI_API_KEY
          
          # Base URL pour l'API
          API_BASE_URL=https://api.choiceapp.fr
          WEBSOCKET_URL=wss://api.choiceapp.fr
          EOL
          
          echo "‚úÖ Fichier .env cr√©√© avec succ√®s pour l'environnement de build"
          
          # V√©rifier que le fichier existe
          if [ -f ".env" ]; then
            echo "üîç Le fichier .env a √©t√© cr√©√© correctement"
            # Afficher uniquement les noms des variables (pas les valeurs)
            grep -o "^[A-Z_]*=" .env | sort
          else
            echo "‚ùå Erreur: Le fichier .env n'a pas √©t√© cr√©√©"
            exit 1
          fi

      - name: Clean Flutter project
        script: |
          flutter clean
          flutter pub get
          flutter pub cache repair

      - name: Verify Flutter dependencies
        script: |
          if ! grep -q "add_2_calendar" pubspec.yaml; then
            echo "‚ö†Ô∏è  La d√©pendance add_2_calendar semble manquante dans pubspec.yaml."
            exit 1
          fi

      - name: Ensure iOS deployment target is 14.0+ in Podfile
        script: |
          cd ios
          
          if [ -f "Podfile" ]; then
            sed -i '' 's/platform :ios, .*/platform :ios, "14.0"/' Podfile
          else
            echo "üö® Podfile non trouv√© ! Assure-toi que ton projet Flutter iOS est bien configur√©."
            exit 1
          fi

      - name: Update CocoaPods
        script: |
          sudo gem install cocoapods --pre
          pod repo update

      - name: Remove and reinstall CocoaPods dependencies
        script: |
          cd ios
          rm -rf Pods Podfile.lock
          pod deintegrate
          pod install --repo-update --verbose

      - name: Ensure add_2_calendar is in GeneratedPluginRegistrant
        script: |
          GENERATED_FILE="ios/Runner/GeneratedPluginRegistrant.m"
          if ! grep -q "add_2_calendar" "$GENERATED_FILE"; then
            echo "‚ö†Ô∏è  Probl√®me d√©tect√© : add_2_calendar n'est pas inclus dans GeneratedPluginRegistrant.m"
            flutter pub get
            flutter clean
          fi

      - name: Upgrade Flutter dependencies
        script: |
          flutter pub upgrade --major-versions
          flutter pub get

      - name: Apply iOS 14.0 Deployment Fix in Xcode Info.plist
        script: |
          cd ios
          plutil -replace MinimumOSVersion -string "14.0" Runner/Info.plist
          plutil -replace LSRequiresIPhoneOS -bool YES Runner/Info.plist
      
      - name: D√©sactiver la d√©tection automatique des profils de provisionnement
        script: |
          # D√©sactiver la d√©tection et l'utilisation de profils de provisionnement
          export SKIP_PROFILE_DETECTION=1
          
          # Cr√©er un fichier d'options d'export personnalis√© qui d√©sactive la signature de code
          cat > ios/ExportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>compileBitcode</key>
              <false/>
              <key>uploadBitcode</key>
              <false/>
          </dict>
          </plist>
          EOL
          
          echo "‚úÖ Configuration de d√©sactivation de la signature de code cr√©√©e"

      - name: Configurer le projet Xcode pour d√©sactiver la signature
        script: |
          cd ios
          
          # S'assurer que les fichiers de configuration Xcode existent
          mkdir -p Flutter
          
          # Cr√©er Release.xcconfig s'il n'existe pas
          if [ ! -f "Flutter/Release.xcconfig" ]; then
            echo "#include \"Generated.xcconfig\"" > Flutter/Release.xcconfig
            echo "#include \"Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig\"" >> Flutter/Release.xcconfig
            echo "‚úÖ Fichier Release.xcconfig cr√©√©"
          fi
          
          # Cr√©er Debug.xcconfig s'il n'existe pas
          if [ ! -f "Flutter/Debug.xcconfig" ]; then
            echo "#include \"Generated.xcconfig\"" > Flutter/Debug.xcconfig
            echo "#include \"Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig\"" >> Flutter/Debug.xcconfig
            echo "‚úÖ Fichier Debug.xcconfig cr√©√©"
          fi

          # Cr√©er le dossier cible pour les fichiers des pods
          mkdir -p "Pods/Target Support Files/Pods-Runner"
          
          # Cr√©er les fichiers .xcfilelist s'ils n'existent pas
          touch "Pods/Target Support Files/Pods-Runner/Pods-Runner-frameworks-Release-input-files.xcfilelist"
          touch "Pods/Target Support Files/Pods-Runner/Pods-Runner-frameworks-Release-output-files.xcfilelist"
          touch "Pods/Target Support Files/Pods-Runner/Pods-Runner-resources-Release-input-files.xcfilelist"
          touch "Pods/Target Support Files/Pods-Runner/Pods-Runner-resources-Release-output-files.xcfilelist"
          
          # Cr√©er les fichiers de configuration de pods s'ils n'existent pas
          if [ ! -f "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig" ]; then
            echo "// Fichier g√©n√©r√© par Codemagic" > "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
            echo "PODS_CONFIGURATION_BUILD_DIR = \${PODS_BUILD_DIR}/\$(CONFIGURATION)\$(EFFECTIVE_PLATFORM_NAME)" >> "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
            echo "PODS_PODFILE_DIR_PATH = \${SRCROOT}/." >> "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
            echo "PODS_ROOT = \${SRCROOT}/Pods" >> "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
            echo "‚úÖ Fichier Pods-Runner.release.xcconfig cr√©√©"
          fi
          
          if [ ! -f "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig" ]; then
            echo "// Fichier g√©n√©r√© par Codemagic" > "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
            echo "PODS_CONFIGURATION_BUILD_DIR = \${PODS_BUILD_DIR}/\$(CONFIGURATION)\$(EFFECTIVE_PLATFORM_NAME)" >> "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
            echo "PODS_PODFILE_DIR_PATH = \${SRCROOT}/." >> "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
            echo "PODS_ROOT = \${SRCROOT}/Pods" >> "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
            echo "‚úÖ Fichier Pods-Runner.debug.xcconfig cr√©√©"
          fi

      - name: Build iOS IPA (No Code Signing)
        script: |
          # D√©finir des variables d'environnement pour d√©sactiver la signature de code
          export SKIP_PROFILE_DETECTION=1
          export DISABLE_CODE_SIGNING=1
          export FLUTTER_XCODE_CODE_SIGN_STYLE="Manual"
          export FLUTTER_XCODE_DEVELOPMENT_TEAM=""
          
          # S'assurer que le build n'utilise pas d'export options ou de provisioning profiles
          cd $CM_BUILD_DIR
          flutter clean
          flutter pub get
          
          # Forcer l'utilisation de --no-codesign et ignorer toute option d'export
          flutter build ipa --no-codesign --verbose

          # Si la m√©thode ci-dessus √©choue, essayer avec une autre approche
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Tentative alternative de build sans signature..."
            cd ios
            rm -rf build
            mkdir -p build/ios/ipa
            cd ..
            flutter build ios --release --no-codesign
            # Cr√©er un IPA minimal manuellement
            cd ios/build/ios/iphoneos
            mkdir Payload
            cp -r Runner.app Payload/
            zip -r ../../../build/ios/ipa/app-release.ipa Payload
            rm -rf Payload
            cd $CM_BUILD_DIR
          fi
          
          echo "‚úÖ Build iOS sans signature termin√©"
          
          # V√©rifier si l'IPA a √©t√© g√©n√©r√©
          if [ -f "build/ios/ipa/app-release.ipa" ]; then
            echo "üéâ IPA g√©n√©r√© avec succ√®s"
          else
            echo "üîç Recherche d'autres IPAs g√©n√©r√©s..."
            find build -name "*.ipa"
          fi

    artifacts:
      - build/ios/ipa/*.ipa

    publishing:
      email:
        recipients:
          - "remi.barbier@hec.edu"

  # Version avec signature de code compl√®te
  ios-release:
    name: iOS Release Build
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      flutter: stable
      xcode: latest
      cocoapods: latest
      groups:
        - ios_credentials
        - choice_app_env
      vars:
        BUNDLE_ID: "fr.choiceapp.app"
    scripts:
      - name: Configurer le fichier .env pour le build
        script: |
          echo "G√©n√©ration du fichier .env pour l'environnement de build..."
          cat > .env << EOL
          # Configuration du serveur
          PORT=5000
          NODE_ENV=production
          
          # Configuration de MongoDB
          MONGO_URI=$CM_MONGO_URI
          
          # Configuration JWT
          JWT_SECRET=$CM_JWT_SECRET
          
          # Configuration des uploads
          UPLOAD_DIR=uploads
          MAX_FILE_SIZE=5242880
          
          # Configuration des APIs externes
          GOOGLE_MAPS_API_KEY=$CM_GOOGLE_MAPS_API_KEY
          STRIPE_SECRET_KEY=$CM_STRIPE_SECRET_KEY
          STRIPE_WEBHOOK_SECRET=$CM_STRIPE_WEBHOOK_SECRET
          OPENAI_API_KEY=$CM_OPENAI_API_KEY
          
          # Base URL pour l'API
          API_BASE_URL=https://api.choiceapp.fr
          WEBSOCKET_URL=wss://api.choiceapp.fr
          EOL
          
          echo "‚úÖ Fichier .env cr√©√© avec succ√®s pour l'environnement de build"
          
          # V√©rifier que le fichier existe
          if [ -f ".env" ]; then
            echo "üîç Le fichier .env a √©t√© cr√©√© correctement"
            # Afficher uniquement les noms des variables (pas les valeurs)
            grep -o "^[A-Z_]*=" .env | sort
          else
            echo "‚ùå Erreur: Le fichier .env n'a pas √©t√© cr√©√©"
            exit 1
          fi

      - name: Clean Flutter project
        script: |
          flutter clean
          flutter pub get
          flutter pub cache repair

      - name: Verify Flutter Setup
        script: |
          mkdir -p ios/Flutter
          # Cr√©er les fichiers xcconfig s'ils n'existent pas d√©j√†
          touch ios/Flutter/Release.xcconfig
          touch ios/Flutter/Debug.xcconfig
          
          # V√©rifier et mettre √† jour leur contenu correctement
          echo '#include "Generated.xcconfig"' > ios/Flutter/Release.xcconfig
          echo '#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"' >> ios/Flutter/Release.xcconfig
          
          echo '#include "Generated.xcconfig"' > ios/Flutter/Debug.xcconfig
          echo '#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"' >> ios/Flutter/Debug.xcconfig
          
          echo "‚úÖ Fichiers Debug.xcconfig et Release.xcconfig cr√©√©s"

      - name: Setup Podfile Correctly
        script: |
          cd ios
          
          # V√©rifier si nous avons un Podfile.rb au lieu d'un Podfile
          if [ -f "Podfile.rb" ] && [ ! -f "Podfile" ]; then
            mv Podfile.rb Podfile
            echo "‚úÖ Podfile.rb renomm√© en Podfile"
          fi
          
          # V√©rifier et corriger le contenu du Podfile si n√©cessaire
          if ! grep -q "platform :ios, '14.0'" Podfile; then
            # Sauvegarder l'ancien Podfile
            cp Podfile Podfile.bak
            
            # Cr√©er un nouveau Podfile avec les bonnes configurations
            cat > Podfile << EOL
# Uncomment this line to define a global platform for your project
platform :ios, '14.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks! :linkage => :dynamic
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      # D√©sactiver Bitcode car Flutter ne l'utilise pas
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # Exclure l'architecture arm64 pour √©viter les erreurs de compilation sur simulateur
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'

      # Assurer que l'application cible bien iOS 14.0+
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
    end
  end
end
EOL
            echo "‚úÖ Podfile recr√©√© avec les bonnes configurations"
          fi

      - name: Create Missing Files and Directories
        script: |
          cd ios
          
          # Cr√©er le dossier Flutter si n√©cessaire
          mkdir -p Flutter
          
          # Cr√©er les fichiers xcconfig
          echo '#include "Generated.xcconfig"' > Flutter/Release.xcconfig
          echo '#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"' >> Flutter/Release.xcconfig
          echo '#include "Generated.xcconfig"' > Flutter/Debug.xcconfig
          echo '#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"' >> Flutter/Debug.xcconfig
          
          # Cr√©er le dossier Target Support Files et ses fichiers
          mkdir -p "Pods/Target Support Files/Pods-Runner"
          
          # Cr√©er les fichiers xcfilelist qui manquent
          touch "Pods/Target Support Files/Pods-Runner/Pods-Runner-frameworks-Release-input-files.xcfilelist"
          touch "Pods/Target Support Files/Pods-Runner/Pods-Runner-frameworks-Release-output-files.xcfilelist"
          touch "Pods/Target Support Files/Pods-Runner/Pods-Runner-resources-Release-input-files.xcfilelist"
          touch "Pods/Target Support Files/Pods-Runner/Pods-Runner-resources-Release-output-files.xcfilelist"
          
          # Cr√©er les fichiers xcconfig pour les pods
          if [ ! -f "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig" ]; then
            mkdir -p "Pods/Target Support Files/Pods-Runner"
            cat > "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig" << EOL
ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES
EXCLUDED_ARCHS[sdk=iphonesimulator*] = arm64
FRAMEWORK_SEARCH_PATHS = \$(inherited)
GCC_PREPROCESSOR_DEFINITIONS = \$(inherited)
HEADER_SEARCH_PATHS = \$(inherited)
LD_RUNPATH_SEARCH_PATHS = \$(inherited) '@executable_path/Frameworks' '@loader_path/Frameworks'
LIBRARY_SEARCH_PATHS = \$(inherited)
OTHER_CFLAGS = \$(inherited)
OTHER_LDFLAGS = \$(inherited)
OTHER_SWIFT_FLAGS = \$(inherited)
PODS_BUILD_DIR = \${BUILD_DIR}
PODS_CONFIGURATION_BUILD_DIR = \${PODS_BUILD_DIR}/\$(CONFIGURATION)\$(EFFECTIVE_PLATFORM_NAME)
PODS_PODFILE_DIR_PATH = \${SRCROOT}/.
PODS_ROOT = \${SRCROOT}/Pods
SWIFT_VERSION = 5.0
USE_RECURSIVE_SCRIPT_INPUTS_IN_SCRIPT_PHASES = YES
EOL
          fi
          
          if [ ! -f "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig" ]; then
            mkdir -p "Pods/Target Support Files/Pods-Runner"
            cat > "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig" << EOL
ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES
EXCLUDED_ARCHS[sdk=iphonesimulator*] = arm64
FRAMEWORK_SEARCH_PATHS = \$(inherited)
GCC_PREPROCESSOR_DEFINITIONS = \$(inherited)
HEADER_SEARCH_PATHS = \$(inherited)
LD_RUNPATH_SEARCH_PATHS = \$(inherited) '@executable_path/Frameworks' '@loader_path/Frameworks'
LIBRARY_SEARCH_PATHS = \$(inherited)
OTHER_CFLAGS = \$(inherited)
OTHER_LDFLAGS = \$(inherited)
OTHER_SWIFT_FLAGS = \$(inherited)
PODS_BUILD_DIR = \${BUILD_DIR}
PODS_CONFIGURATION_BUILD_DIR = \${PODS_BUILD_DIR}/\$(CONFIGURATION)\$(EFFECTIVE_PLATFORM_NAME)
PODS_PODFILE_DIR_PATH = \${SRCROOT}/.
PODS_ROOT = \${SRCROOT}/Pods
SWIFT_VERSION = 5.0
USE_RECURSIVE_SCRIPT_INPUTS_IN_SCRIPT_PHASES = YES
EOL
          fi
          
          # Cr√©er le fichier profile.xcconfig
          if [ ! -f "Flutter/Profile.xcconfig" ]; then
            echo '#include "Generated.xcconfig"' > Flutter/Profile.xcconfig
            echo '#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"' >> Flutter/Profile.xcconfig
            
            # Cr√©er aussi le fichier profile pour pods
            cat > "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig" << EOL
ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES
EXCLUDED_ARCHS[sdk=iphonesimulator*] = arm64
FRAMEWORK_SEARCH_PATHS = \$(inherited)
GCC_PREPROCESSOR_DEFINITIONS = \$(inherited)
HEADER_SEARCH_PATHS = \$(inherited)
LD_RUNPATH_SEARCH_PATHS = \$(inherited) '@executable_path/Frameworks' '@loader_path/Frameworks'
LIBRARY_SEARCH_PATHS = \$(inherited)
OTHER_CFLAGS = \$(inherited)
OTHER_LDFLAGS = \$(inherited)
OTHER_SWIFT_FLAGS = \$(inherited)
PODS_BUILD_DIR = \${BUILD_DIR}
PODS_CONFIGURATION_BUILD_DIR = \${PODS_BUILD_DIR}/\$(CONFIGURATION)\$(EFFECTIVE_PLATFORM_NAME)
PODS_PODFILE_DIR_PATH = \${SRCROOT}/.
PODS_ROOT = \${SRCROOT}/Pods
SWIFT_VERSION = 5.0
USE_RECURSIVE_SCRIPT_INPUTS_IN_SCRIPT_PHASES = YES
EOL
          fi
          
          echo "‚úÖ Tous les fichiers et dossiers n√©cessaires ont √©t√© cr√©√©s"

      - name: Update CocoaPods Repository
        script: |
          sudo gem install cocoapods --pre
          pod repo update

      - name: Install Pod Dependencies
        script: |
          cd ios
          rm -rf Pods Podfile.lock
          pod install --repo-update --verbose

      - name: Set up code signing settings
        script: |
          # Mettre √† jour l'√©quipe de d√©veloppement et le provisioning profile
          APP_STORE_CONNECT_PRIVATE_KEY_BASE64="${APP_STORE_CONNECT_PRIVATE_KEY}"
          if [ -n "$APP_STORE_CONNECT_PRIVATE_KEY_BASE64" ]; then
            echo $APP_STORE_CONNECT_PRIVATE_KEY_BASE64 | base64 --decode > /tmp/api_key.p8
            echo "‚úÖ Cl√© API App Store Connect d√©cod√©e"
          fi
          
          xcode-project use-profiles

      - name: Build iOS IPA
        script: |
          cd $CM_BUILD_DIR
          flutter build ipa --release --export-options-plist=/Users/builder/export_options.plist

    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log

    publishing:
      email:
        recipients:
          - remi.barbier@hec.edu
