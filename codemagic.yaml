workflows:
  android-release:
    name: Android Release Build
    instance_type: linux_x2
    max_build_duration: 120
    environment:
      flutter: stable
      android_signing:
        - choice-keystore
      groups:
        - google_play
        - choice_app_env
      vars:
        PACKAGE_NAME: "fr.choiceapp.app"
    scripts:
      - name: Configurer le fichier .env pour le build
        script: |
          echo "G√©n√©ration du fichier .env pour l'environnement de build..."
          # R√©cup√©rer le chemin du r√©pertoire du projet
          PROJECT_DIR=$(pwd)
          
          # S'assurer que le r√©pertoire frontend existe
          if [ -d "frontend" ]; then
            # Si le r√©pertoire frontend existe, on y acc√®de
            cd frontend
            FRONTEND_DIR=$(pwd)
          else
            # Si on est d√©j√† dans frontend ou il n'existe pas
            FRONTEND_DIR=$(pwd)
          fi
          
          # S'assurer que le r√©pertoire assets/env existe
          mkdir -p "$FRONTEND_DIR/assets/env"
          
          # Cr√©er directement le fichier dans assets/env/
          echo "Cr√©ation du fichier d'environnement dans: $FRONTEND_DIR/assets/env"
          cat > "$FRONTEND_DIR/assets/env/production.env" << EOL
          # Configuration du serveur
          PORT=5000
          NODE_ENV=production
          
          # Configuration de MongoDB
          MONGO_URI=$CM_MONGO_URI
          
          # Configuration JWT
          JWT_SECRET=$CM_JWT_SECRET
          
          # Configuration des uploads
          UPLOAD_DIR=uploads
          MAX_FILE_SIZE=5242880
          
          # Configuration des APIs externes
          GOOGLE_MAPS_API_KEY=$CM_GOOGLE_MAPS_API_KEY
          STRIPE_SECRET_KEY=$CM_STRIPE_SECRET_KEY
          STRIPE_WEBHOOK_SECRET=$CM_STRIPE_WEBHOOK_SECRET
          OPENAI_API_KEY=$CM_OPENAI_API_KEY
          
          # Base URL pour l'API
          API_BASE_URL=https://api.choiceapp.fr
          WEBSOCKET_URL=wss://api.choiceapp.fr
          EOL
          
          # Copier aussi dans default.env pour √™tre s√ªr
          cp "$FRONTEND_DIR/assets/env/production.env" "$FRONTEND_DIR/assets/env/default.env"
          
          echo "‚úÖ Fichiers d'environnement cr√©√©s avec succ√®s pour l'environnement de build"
          
          # V√©rifier que les fichiers existent et afficher leur taille
          if [ -f "$FRONTEND_DIR/assets/env/default.env" ] && [ -f "$FRONTEND_DIR/assets/env/production.env" ]; then
            echo "üîç Les fichiers d'environnement ont √©t√© cr√©√©s correctement:"
            ls -la "$FRONTEND_DIR/assets/env/"
            # Afficher uniquement les noms des variables (pas les valeurs)
            grep -o "^[A-Z_]*=" "$FRONTEND_DIR/assets/env/default.env" | sort
            
            # V√©rifier que les fichiers sont accessibles
            if [ -r "$FRONTEND_DIR/assets/env/default.env" ]; then
              echo "‚úÖ Les fichiers d'environnement sont lisibles"
            else
              echo "‚ö†Ô∏è Les fichiers d'environnement ne sont pas lisibles"
            fi
            
            # Retourner au r√©pertoire du projet
            cd "$PROJECT_DIR"
          else
            echo "‚ùå Erreur: Fichiers d'environnement non cr√©√©s"
            cd "$PROJECT_DIR"
            exit 1
          fi

      - name: Verify asset in pubspec.yaml
        script: |
          # V√©rifier que .env est correctement d√©clar√© dans le pubspec.yaml
          if [ -d "frontend" ]; then
            PUBSPEC_FILE="frontend/pubspec.yaml"
          else
            PUBSPEC_FILE="pubspec.yaml"
          fi
          
          if [ -f "$PUBSPEC_FILE" ]; then
            if grep -q "assets:" "$PUBSPEC_FILE" && grep -q "- .env" "$PUBSPEC_FILE"; then
              echo "‚úÖ .env est correctement d√©clar√© comme asset dans pubspec.yaml"
            else
              echo "‚ö†Ô∏è .env n'est peut-√™tre pas correctement d√©clar√© comme asset dans pubspec.yaml"
              echo "Contenu de la section assets:"
              grep -A 10 "assets:" "$PUBSPEC_FILE"
            fi
          else
            echo "‚ùå Fichier pubspec.yaml non trouv√©: $PUBSPEC_FILE"
          fi

      - name: Clean and Get Dependencies
        script: |
          # Nettoyer et r√©parer
          flutter clean
          flutter pub cache repair
          
          # V√©rifier les versions de flutter_map et flutter_map_marker_cluster
          if grep -q "flutter_map: \^8.0.0" pubspec.yaml; then
            # Ajuster la version de flutter_map pour la compatibilit√©
            sed -i 's/flutter_map: \^8.0.0/flutter_map: \^7.0.0/g' pubspec.yaml
            echo "‚úì Flutter Map ajust√© √† ^7.0.0 pour compatibilit√© avec marker_cluster"
          fi
          
          if grep -q "flutter_map_marker_cluster: \^1.3.4" pubspec.yaml; then
            # Mettre √† jour flutter_map_marker_cluster pour compatibilit√© avec flutter_map ^7.0.0
            sed -i 's/flutter_map_marker_cluster: \^1.3.4/flutter_map_marker_cluster: \^1.4.0/g' pubspec.yaml
            echo "‚úì Flutter Map Marker Cluster mis √† jour √† ^1.4.0"
          fi
          
          # Force des URLs HTTPS pour les d√©pendances Git
          git config --global url."https://".insteadOf "git://"
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          
          # Obtenir les d√©pendances proprement
          flutter pub get --verbose
          
          # S'assurer que les assets/env existent dans le r√©pertoire de build
          mkdir -p build/app/intermediates/flutter/release/assets/env/
          
          # Copier les fichiers d'environnement dans le r√©pertoire de build
          if [ -d "assets/env" ]; then
            cp -r assets/env/* build/app/intermediates/flutter/release/assets/env/
            echo "‚úÖ Fichiers d'environnement copi√©s vers le r√©pertoire de build"
            ls -la build/app/intermediates/flutter/release/assets/env/
          else
            echo "‚ö†Ô∏è R√©pertoire assets/env non trouv√© pour la copie"
          fi

      - name: Fix Android Configuration
        script: |
          # V√©rifier et corriger les niveaux d'API Android
          GRADLE_FILE="android/app/build.gradle"
          if grep -q "compileSdkVersion 35" "$GRADLE_FILE"; then
            sed -i 's/compileSdkVersion 35/compileSdkVersion 34/g' "$GRADLE_FILE"
            sed -i 's/targetSdkVersion 35/targetSdkVersion 34/g' "$GRADLE_FILE"
            echo "‚úì Niveaux d'API Android corrig√©s (35 -> 34)"
          fi
          
          # V√©rifier GradleException et remplacer si n√©cessaire
          if grep -q "throw new GradleException" "$GRADLE_FILE"; then
            sed -i 's/throw new GradleException/throw new RuntimeException/g' "$GRADLE_FILE"
            echo "‚úì GradleException remplac√© par RuntimeException"
          fi
          
          # Ajouter les permissions internet dans le manifeste si n√©cessaire
          MANIFEST_FILE="android/app/src/main/AndroidManifest.xml"
          if [ -f "$MANIFEST_FILE" ] && ! grep -q "android.permission.INTERNET" "$MANIFEST_FILE"; then
            sed -i '/<uses-permission/a \    <uses-permission android:name="android.permission.INTERNET" />' "$MANIFEST_FILE"
            echo "‚úì Permission internet ajout√©e"
          fi

      - name: V√©rification de Compatibilit√© Web
        script: |
          echo "V√©rification de la configuration pour le web..."
          
          # V√©rifier la pr√©sence du fichier adaptatif pour les cartes
          MAP_UTIL_DIR="lib/widgets/maps"
          if [ ! -d "$MAP_UTIL_DIR" ]; then
            mkdir -p "$MAP_UTIL_DIR"
          fi
          
          # V√©rifier que les d√©pendances n√©cessaires sont activ√©es pour le web
          WEB_INDEX="web/index.html"
          if [ -f "$WEB_INDEX" ] && ! grep -q "openstreetmap" "$WEB_INDEX"; then
            # Ajouter le lien vers la feuille de style OpenStreetMap si n√©cessaire
            sed -i '/<\/head>/i \  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>' "$WEB_INDEX"
            echo "‚úì Feuille de style Leaflet ajout√©e pour le web"
          fi

      - name: Build Android Bundle
        script: |
          # Construire le bundle Android
          flutter build appbundle --release
          
          # V√©rifier si le build a r√©ussi
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "‚úÖ Build Android r√©ussi!"
          else
            echo "‚ùå Build Android √©chou√©"
            exit 1
          fi

      - name: Verify bundle structure (debug)
        script: |
          echo "V√©rification de la structure du bundle..."
          # V√©rifier les assets interm√©diaires
          if [ -d "build/app/intermediates/flutter/release/assets/env" ]; then
            echo "‚úÖ Dossier assets/env trouv√© dans le r√©pertoire des assets interm√©diaires"
            echo "Contenu du dossier assets/env:"
            ls -la build/app/intermediates/flutter/release/assets/env/
          else
            echo "‚ö†Ô∏è Dossier assets/env non trouv√© dans le r√©pertoire des assets interm√©diaires"
            echo "Contenu du r√©pertoire flutter/release:"
            find build/app/intermediates/flutter/release -type d | sort
          fi
          
          # Copier manuellement les fichiers d'environnement si n√©cessaire
          mkdir -p build/app/intermediates/flutter/release/assets/env
          if [ -f "assets/env/default.env" ]; then
            cp assets/env/default.env build/app/intermediates/flutter/release/assets/env/
            cp assets/env/production.env build/app/intermediates/flutter/release/assets/env/
            echo "‚úÖ Fichiers d'environnement copi√©s manuellement dans le r√©pertoire des assets interm√©diaires"
          else
            echo "‚ö†Ô∏è Impossible de trouver les fichiers d'environnement source pour la copie manuelle"
          fi
          
          # Utiliser l'outil bundletool pour analyser le bundle
          echo "Extraction du contenu du bundle pour v√©rification..."
          mkdir -p bundle_analysis
          if [ -f "${ANDROID_HOME}/cmdline-tools/latest/bin/bundletool" ]; then
            BUNDLETOOL="${ANDROID_HOME}/cmdline-tools/latest/bin/bundletool"
          else
            # T√©l√©charger bundletool si n√©cessaire
            if [ ! -f "bundletool.jar" ]; then
              echo "T√©l√©chargement de bundletool..."
              curl -L -o bundletool.jar https://github.com/google/bundletool/releases/download/1.15.6/bundletool-all-1.15.6.jar
            fi
            BUNDLETOOL="java -jar bundletool.jar"
          fi
          
          # Convertir le bundle en APKs pour l'inspection
          $BUNDLETOOL build-apks --bundle=build/app/outputs/bundle/release/app-release.aab --output=bundle_analysis/app.apks
          
          # Extraire les APKs pour l'inspection
          mkdir -p bundle_analysis/extracted
          unzip -q bundle_analysis/app.apks -d bundle_analysis/extracted
          
          # V√©rifier la pr√©sence de .env dans les assets
          echo "Recherche de .env dans les assets extraits..."
          find bundle_analysis -name "*.env" -type f

    artifacts:
      - build/app/outputs/bundle/release/app-release.aab

    publishing:
      email:
        recipients:
          - "remi.barbier@hec.edu"

  # Version sans signature de code (si jamais vous rencontrez √† nouveau des probl√®mes de profil)
  ios-release-unsigned:
    name: iOS Release Build (Unsigned)
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      flutter: stable
      xcode: latest
      cocoapods: latest
      groups:
        - choice_app_env
      vars:
        # Variables pour d√©sactiver compl√®tement la signature de code
        DISABLE_CODE_SIGNING: "true"
        ENABLE_MANUAL_PROVISIONING: "false"
    scripts:
      - name: Configurer le fichier .env pour le build
        script: |
          echo "G√©n√©ration du fichier .env pour l'environnement de build..."
          cat > .env << EOL
          # Configuration du serveur
          PORT=5000
          NODE_ENV=production
          
          # Configuration de MongoDB
          MONGO_URI=$CM_MONGO_URI
          
          # Configuration JWT
          JWT_SECRET=$CM_JWT_SECRET
          
          # Configuration des uploads
          UPLOAD_DIR=uploads
          MAX_FILE_SIZE=5242880
          
          # Configuration des APIs externes
          GOOGLE_MAPS_API_KEY=$CM_GOOGLE_MAPS_API_KEY
          STRIPE_SECRET_KEY=$CM_STRIPE_SECRET_KEY
          STRIPE_WEBHOOK_SECRET=$CM_STRIPE_WEBHOOK_SECRET
          OPENAI_API_KEY=$CM_OPENAI_API_KEY
          
          # Base URL pour l'API
          API_BASE_URL=https://api.choiceapp.fr
          WEBSOCKET_URL=wss://api.choiceapp.fr
          EOL
          
          echo "‚úÖ Fichier .env cr√©√© avec succ√®s pour l'environnement de build"
          
          # V√©rifier que le fichier existe
          if [ -f ".env" ]; then
            echo "üîç Le fichier .env a √©t√© cr√©√© correctement"
            # Afficher uniquement les noms des variables (pas les valeurs)
            grep -o "^[A-Z_]*=" .env | sort
          else
            echo "‚ùå Erreur: Le fichier .env n'a pas √©t√© cr√©√©"
            exit 1
          fi

      - name: Clean Flutter project
        script: |
          flutter clean
          flutter pub get
          flutter pub cache repair

      - name: Verify Flutter dependencies
        script: |
          if ! grep -q "add_2_calendar" pubspec.yaml; then
            echo "‚ö†Ô∏è  La d√©pendance add_2_calendar semble manquante dans pubspec.yaml."
            exit 1
          fi

      - name: Ensure iOS deployment target is 14.0+ in Podfile
        script: |
          cd ios
          
          if [ -f "Podfile" ]; then
            sed -i '' 's/platform :ios, .*/platform :ios, "14.0"/' Podfile
          else
            echo "üö® Podfile non trouv√© ! Assure-toi que ton projet Flutter iOS est bien configur√©."
            exit 1
          fi

      - name: Update CocoaPods
        script: |
          sudo gem install cocoapods --pre
          pod repo update

      - name: Remove and reinstall CocoaPods dependencies
        script: |
          cd ios
          rm -rf Pods Podfile.lock
          pod deintegrate || echo "Pod deintegrate skipped or failed, continuing..."
          
          # V√©rifier les chemins des plugins
          echo "üîç V√©rification des dossiers de plugins importants..."
          SYMLINK_DIR=".symlinks/plugins"
          for PLUGIN in "firebase_core" "cloud_firestore" "firebase_core_custom" "cloud_firestore_custom" "add_2_calendar"; do
            echo "  - Checking $PLUGIN..."
            if [ -d "$SYMLINK_DIR/$PLUGIN" ]; then
              echo "    ‚úÖ $PLUGIN directory exists"
              find "$SYMLINK_DIR/$PLUGIN" -name "*.podspec" | xargs ls -la || echo "    ‚ö†Ô∏è No podspec files found"
            else
              echo "    ‚ùå $PLUGIN directory missing"
            fi
          done
          
          # Forcer l'installation des pods
          echo "üöÄ Tentative d'installation des pods..."
          COCOAPODS_DISABLE_STATS=true pod install --repo-update --verbose
          
          # Si l'installation √©choue, essayer avec --allow-root et autres options
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Premi√®re tentative d'installation des pods √©chou√©e, essai avec options alternatives..."
            COCOAPODS_DISABLE_STATS=true pod install --repo-update --verbose --allow-root
            
            # Si √ßa √©choue encore, essayer avec --no-clean
            if [ $? -ne 0 ]; then
              echo "‚ö†Ô∏è Seconde tentative √©chou√©e, essai avec --no-clean..."
              COCOAPODS_DISABLE_STATS=true pod install --repo-update --verbose --no-clean
            fi
          fi
          
          # V√©rifier si l'installation a r√©ussi
          if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
             echo "‚úÖ Installation des pods r√©ussie."
          else
             echo "‚ùå √âchec de l'installation des pods apr√®s plusieurs tentatives."
             # Afficher le contenu du r√©pertoire pour le d√©bogage
             ls -la
             
             # Tenter une approche alternative avec bundle
             echo "üîÑ Tentative avec bundler..."
             sudo gem install bundler
             bundle init
             echo "gem 'cocoapods', '1.12.1'" >> Gemfile
             bundle install
             bundle exec pod install --repo-update
             
             # V√©rifier √† nouveau
             if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
                echo "‚úÖ Installation des pods r√©ussie avec bundler."
             else
                exit 1
             fi
          fi
          
          # Afficher le Pods/Manifest.lock pour d√©boguer
          if [ -f "Pods/Manifest.lock" ]; then
            echo "üìã Contenu de Pods/Manifest.lock:"
            head -n 50 Pods/Manifest.lock # Afficher les 50 premi√®res lignes
          else
            echo "‚ö†Ô∏è Pods/Manifest.lock non trouv√©"
          fi

      - name: Verify Apple Pay Merchant ID in Entitlements
        script: |
          cd ios
          if [ ! -f "Runner/Runner.entitlements" ]; then
            cat > Runner/Runner.entitlements << EOL
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.developer.in-app-payments</key>
    <array>
        <string>merchant.fr.choiceapp.app</string>
    </array>
</dict>
</plist>
EOL
            echo "‚úÖ Fichier d'entitlements Apple Pay cr√©√©"
          else
            echo "‚úÖ Fichier d'entitlements existant"
          fi
          if ! grep -q "merchant.fr.choiceapp.app" Runner/Info.plist; then
            plutil -insert 'com.apple.developer.in-app-payments' -xml '<array><string>merchant.fr.choiceapp.app</string></array>' Runner/Info.plist || true
            echo "‚úÖ Merchant ID ajout√© √† Info.plist"
          fi

      - name: Apply iOS 14.0 Deployment Fix in Xcode Info.plist
        script: |
          cd ios
          plutil -replace MinimumOSVersion -string "14.0" Runner/Info.plist
          plutil -replace LSRequiresIPhoneOS -bool YES Runner/Info.plist

      - name: Install certificate in keychain
        script: |
          echo $CM_CERTIFICATE | base64 --decode > ios_distribution.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import ios_distribution.p12 -k build.keychain -P "$CM_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          echo "‚úÖ Certificat install√© dans le keychain"

      - name: Debug keychain and provisioning
        script: |
          echo "== Profils de provisionnement =="
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "== Certificats dans le keychain =="
          security find-identity -v -p codesigning
          echo "== Team ID utilis√© =="
          echo $CM_APP_STORE_CONNECT_TEAM_ID

      - name: Build iOS IPA with Proper Signing
        script: |
          flutter build ipa --release
          echo "‚úÖ Build iOS avec signature termin√©"
          if [ -f "build/ios/ipa/app-release.ipa" ]; then
            echo "üéâ IPA sign√© g√©n√©r√© avec succ√®s"
          else
            echo "üîç Recherche d'autres IPAs g√©n√©r√©s..."
            find build -name "*.ipa"
          fi

    artifacts:
      - build/ios/ipa/*.ipa

    publishing:
      email:
        recipients:
          - "remi.barbier@hec.edu"

  # Version avec signature de code (avec les certificats et profils mis √† jour)
  ios-release:
    name: iOS Release Build (Signed)
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      flutter: stable
      xcode: latest
      cocoapods: latest
      ios_signing:
        distribution_type: ad-hoc
        bundle_identifier: fr.choiceapp.app
        team_id: $CM_APP_STORE_CONNECT_TEAM_ID
        provisioning_profiles:
          - fr.choiceapp.app: CM_PROVISIONING_PROFILE
    scripts:
      - name: Configurer le fichier .env pour le build
        script: |
          echo "G√©n√©ration du fichier .env pour l'environnement de build..."
          # R√©cup√©rer le chemin du r√©pertoire du projet
          PROJECT_DIR=$(pwd)
          
          # S'assurer que le r√©pertoire frontend existe
          if [ -d "frontend" ]; then
            # Si le r√©pertoire frontend existe, on y acc√®de
            cd frontend
            FRONTEND_DIR=$(pwd)
          else
            # Si on est d√©j√† dans frontend ou il n'existe pas
            FRONTEND_DIR=$(pwd)
          fi
          
          # S'assurer que le r√©pertoire assets/env existe
          mkdir -p "$FRONTEND_DIR/assets/env"
          
          # Cr√©er directement le fichier dans assets/env/
          echo "Cr√©ation du fichier d'environnement dans: $FRONTEND_DIR/assets/env"
          cat > "$FRONTEND_DIR/assets/env/production.env" << EOL
          # Configuration du serveur
          PORT=5000
          NODE_ENV=production
          
          # Configuration de MongoDB
          MONGO_URI=$CM_MONGO_URI
          
          # Configuration JWT
          JWT_SECRET=$CM_JWT_SECRET
          
          # Configuration des uploads
          UPLOAD_DIR=uploads
          MAX_FILE_SIZE=5242880
          
          # Configuration des APIs externes
          GOOGLE_MAPS_API_KEY=$CM_GOOGLE_MAPS_API_KEY
          STRIPE_SECRET_KEY=$CM_STRIPE_SECRET_KEY
          STRIPE_WEBHOOK_SECRET=$CM_STRIPE_WEBHOOK_SECRET
          OPENAI_API_KEY=$CM_OPENAI_API_KEY
          
          # Base URL pour l'API
          API_BASE_URL=https://api.choiceapp.fr
          WEBSOCKET_URL=wss://api.choiceapp.fr
          EOL
          
          # Copier aussi dans default.env pour √™tre s√ªr
          cp "$FRONTEND_DIR/assets/env/production.env" "$FRONTEND_DIR/assets/env/default.env"
          
          echo "‚úÖ Fichiers d'environnement cr√©√©s avec succ√®s pour l'environnement de build"
          
          # Retourner au r√©pertoire du projet
          cd "$PROJECT_DIR"

      - name: Clean Flutter project
        script: |
          flutter clean
          flutter pub get
          flutter pub cache repair

      - name: Verify Custom Plugins
        script: |
          echo "üîç V√©rification des plugins personnalis√©s..."
          
          # V√©rifier si les plugins personnalis√©s existent localement
          if [ -d "plugin" ]; then
            echo "‚úÖ Dossier plugin trouv√©"
            ls -la plugin/
          elif [ -d "../plugin" ]; then
            echo "‚úÖ Dossier plugin trouv√© au niveau parent"
            ls -la ../plugin/
          else
            echo "‚ö†Ô∏è Dossier de plugins personnalis√©s non trouv√©" 
          fi
          
          # Ne pas tenter d'installer les plugins standards
          echo "‚öôÔ∏è Utilisation des plugins personnalis√©s, pas d'installation depuis pub.dev"
          
          # V√©rifier la pr√©sence des plugins dans pubspec.yaml
          echo "üîç V√©rification des r√©f√©rences dans pubspec.yaml"
          grep -A 5 "firebase_core:" pubspec.yaml || echo "firebase_core non trouv√© dans pubspec.yaml"
          grep -A 5 "cloud_firestore:" pubspec.yaml || echo "cloud_firestore non trouv√© dans pubspec.yaml"
          grep -A 5 "firebase_messaging:" pubspec.yaml || echo "firebase_messaging non trouv√© dans pubspec.yaml"
          grep -A 5 "firebase_analytics:" pubspec.yaml || echo "firebase_analytics non trouv√© dans pubspec.yaml"
          grep -A 5 "firebase_auth:" pubspec.yaml || echo "firebase_auth non trouv√© dans pubspec.yaml"

      - name: Ensure iOS deployment target is 14.0+ in Podfile
        script: |
          cd ios
          if [ -f "Podfile" ]; then
            # Ajouter explicitement la plateforme iOS 14.0
            sed -i '' 's/platform :ios, .*/platform :ios, "14.0"/' Podfile
            
            # V√©rifier si la ligne platform existe, sinon l'ajouter
            if ! grep -q "platform :ios" Podfile; then
              # Ajouter au d√©but du fichier
              sed -i '' '1i\
platform :ios, \'14.0\'' Podfile
            fi
            
            # Supprimer l'ancien hook pre_install s'il existe
            awk '/^# Hook pour r√©soudre/,/^end$/ {next} {print}' Podfile > Podfile.tmp && mv Podfile.tmp Podfile
            
            # Ajouter un hook pre_install pour g√©rer les podspecs manquants
            if ! grep -q "pre_install" Podfile; then
              cat >> Podfile << 'EOL'

# Hook pour r√©soudre les probl√®mes de podspecs manquants et garantir la compatibilit√©
pre_install do |installer|
  # S'assurer que la plateforme iOS est bien d√©finie √† 14.0 pour tous les pods
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
    end
  end
  
  # Gestion des podspecs manquants
  installer.pod_targets.each do |pod|
    # V√©rifier si c'est un plugin Firebase ou autre connu pour poser probl√®me
    if pod.name.start_with?('firebase_', 'cloud_firestore', 'add_2_calendar', 'webview_flutter')
      puts "V√©rification du podspec pour: #{pod.name}"
      
      # V√©rifier si le podspec est accessible
      unless File.exist?(File.join(pod.root, "#{pod.name}.podspec"))
        # Si le podspec n'existe pas, v√©rifier s'il existe dans ios/
        ios_podspec = File.join(pod.root, 'ios', "#{pod.name}.podspec")
        if !File.exist?(ios_podspec) && Dir.exist?(File.join(pod.root, 'ios'))
          # Cr√©er un podspec g√©n√©rique si n√©cessaire
          File.open(ios_podspec, 'w') do |file|
            file.puts <<~PODSPEC
              Pod::Spec.new do |s|
                s.name             = '#{pod.name}'
                s.version          = '0.0.1'
                s.summary          = 'Flutter plugin for #{pod.name}'
                s.description      = 'Flutter plugin for #{pod.name}'
                s.homepage         = 'https://flutter.dev'
                s.license          = { :type => 'BSD', :file => '../LICENSE' }
                s.author           = { 'Flutter Team' => 'flutter-dev@googlegroups.com' }
                s.source           = { :path => '.' }
                s.source_files     = 'Classes/**/*'
                s.dependency 'Flutter'
                s.platform = :ios, '14.0'
                s.ios.deployment_target = '14.0'
                s.static_framework = true
                s.pod_target_xcconfig = { 'DEFINES_MODULE' => 'YES' }
              end
            PODSPEC
          end
          puts "‚úÖ Podspec cr√©√© pour #{pod.name} dans #{ios_podspec}"
        end
      end
    end
  end
end

EOL
            fi

            # Ajouter aussi la d√©finition explicite du projet Flutter
            if ! grep -q "flutter_root" Podfile; then
              cat >> Podfile << 'EOL'

# This is necessary to ensure proper integration with Flutter
flutter_root = File.dirname(File.realpath(`which flutter`.chomp))
flutter_ios_framework_path = File.join(flutter_root, 'bin', 'cache', 'artifacts', 'engine', 'ios')
flutter_framework_path = File.join(flutter_ios_framework_path, 'Flutter.xcframework')
if File.exist?(flutter_framework_path)
  pod 'Flutter', :path => flutter_framework_path
end

EOL
            fi

            echo "‚úÖ Podfile configur√© avec iOS 14.0 et hooks de compatibilit√©"
            cat Podfile
          else
            echo "üö® Podfile non trouv√© ! Assure-toi que ton projet Flutter iOS est bien configur√©."
            exit 1
          fi

      - name: Update CocoaPods
        script: |
          sudo gem install cocoapods
          pod repo update

      - name: Manual Podspec Creation for Custom Firebase Plugins
        script: |
          echo "üîß Cr√©ation de podspecs manuels pour les plugins Firebase personnalis√©s..."
          cd ios
          
          # Base directory for plugin symlinks
          SYMLINK_DIR=".symlinks/plugins"
          
          # Fonction pour cr√©er un podspec
          create_podspec() {
            PLUGIN_NAME=$1
            PLUGIN_PATH="$SYMLINK_DIR/$PLUGIN_NAME/ios"
            PODSPEC_FILE="$PLUGIN_PATH/$PLUGIN_NAME.podspec"
            FIREBASE_DEPENDENCY=$2
            
            mkdir -p "$PLUGIN_PATH"
            
            if [ ! -f "$PODSPEC_FILE" ]; then
              echo "üìù Cr√©ation du podspec pour $PLUGIN_NAME √† $PODSPEC_FILE"
              cat > "$PODSPEC_FILE" <<- EOL
Pod::Spec.new do |s|
  s.name             = '$PLUGIN_NAME'
  s.version          = '0.0.1' # Version factice
  s.summary          = 'Custom $PLUGIN_NAME plugin for Flutter.'
  s.description      = 'Custom $PLUGIN_NAME plugin for Flutter, using local source.'
  s.homepage         = 'https://github.com/RemiBp/flutter_app_badger_fork'
  s.license          = { :type => 'BSD', :file => '../../../LICENSE' } # Ajuster le chemin si n√©cessaire
  s.author           = { 'Choice App' => 'remi.barbier@hec.edu' }
  s.source           = { :path => '.' } # Le source est le r√©pertoire ios du plugin
  s.source_files     = 'Classes/**/*'
  s.public_header_files = 'Classes/**/*.h'
  s.ios.deployment_target = '14.0'
  s.static_framework = true
  s.dependency 'Flutter'
  s.dependency 'firebase_core' # D√©pendance de base
  s.dependency '$FIREBASE_DEPENDENCY', '~> 10.9.0' # D√©pendance Firebase sp√©cifique
end
EOL
            else
                echo "‚úÖ Podspec pour $PLUGIN_NAME existe d√©j√†."
            fi
          }

          # Fonction pour cr√©er un lien symbolique entre le nom standard et le nom personnalis√©
          create_symlink() {
            STANDARD_NAME=$1
            CUSTOM_NAME=$2
            
            STANDARD_PATH="$SYMLINK_DIR/$STANDARD_NAME"
            CUSTOM_PATH="$SYMLINK_DIR/$CUSTOM_NAME"
            
            mkdir -p "$STANDARD_PATH/ios"
            mkdir -p "$CUSTOM_PATH/ios"
            
            # Cr√©er le podspec pour le nom standard
            create_podspec "$STANDARD_NAME" "$3"
            
            # Cr√©er le podspec pour le nom personnalis√©
            create_podspec "$CUSTOM_NAME" "$3"
            
            echo "üîÑ Liaison entre $STANDARD_NAME et $CUSTOM_NAME cr√©√©e"
          }
          
          # Cr√©er les symlinks et podspecs pour les paires standard/personnalis√©
          create_symlink "firebase_core" "firebase_core_custom" "Firebase/CoreOnly"
          create_symlink "cloud_firestore" "cloud_firestore_custom" "Firebase/Firestore"
          create_symlink "firebase_messaging" "firebase_messaging_custom" "Firebase/Messaging"
          create_symlink "firebase_analytics" "firebase_analytics_custom" "Firebase/Analytics"
          create_symlink "firebase_auth" "firebase_auth_custom" "Firebase/Auth"
          
          # Cr√©er aussi des podspecs pour d'autres plugins qui peuvent poser probl√®me
          echo "üîß Cr√©ation de podspecs additionnels pour les plugins probl√©matiques..."
          for PLUGIN in "add_2_calendar" "webview_flutter" "emoji_picker_flutter"; do
            PLUGIN_PATH="$SYMLINK_DIR/$PLUGIN/ios"
            PODSPEC_FILE="$PLUGIN_PATH/$PLUGIN.podspec"
            
            mkdir -p "$PLUGIN_PATH"
            
            if [ ! -f "$PODSPEC_FILE" ]; then
              echo "üìù Cr√©ation du podspec g√©n√©rique pour $PLUGIN √† $PODSPEC_FILE"
              cat > "$PODSPEC_FILE" <<- EOL
Pod::Spec.new do |s|
  s.name             = '$PLUGIN'
  s.version          = '0.0.1'
  s.summary          = 'Flutter plugin for $PLUGIN'
  s.description      = 'Flutter plugin for $PLUGIN'
  s.homepage         = 'https://flutter.dev'
  s.license          = { :type => 'BSD', :file => '../../../LICENSE' }
  s.author           = { 'Flutter Team' => 'flutter-dev@googlegroups.com' }
  s.source           = { :path => '.' }
  s.source_files     = 'Classes/**/*'
  s.public_header_files = 'Classes/**/*.h'
  s.dependency 'Flutter'
  s.platform = :ios, '14.0'
  s.pod_target_xcconfig = { 'DEFINES_MODULE' => 'YES', 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'i386' }
end
EOL
            else
              echo "‚úÖ Podspec pour $PLUGIN existe d√©j√†."
            fi
          done
          
          echo "‚úÖ V√©rification/Cr√©ation des podspecs manuels termin√©e"
          ls -la $SYMLINK_DIR/*/ios/*.podspec || echo "Aucun podspec personnalis√© trouv√©/cr√©√©"

      - name: Remove and reinstall CocoaPods dependencies
        script: |
          cd ios
          rm -rf Pods Podfile.lock
          pod deintegrate || echo "Pod deintegrate skipped or failed, continuing..."
          
          # V√©rifier les chemins des plugins
          echo "üîç V√©rification des dossiers de plugins importants..."
          SYMLINK_DIR=".symlinks/plugins"
          for PLUGIN in "firebase_core" "cloud_firestore" "firebase_core_custom" "cloud_firestore_custom" "add_2_calendar"; do
            echo "  - Checking $PLUGIN..."
            if [ -d "$SYMLINK_DIR/$PLUGIN" ]; then
              echo "    ‚úÖ $PLUGIN directory exists"
              find "$SYMLINK_DIR/$PLUGIN" -name "*.podspec" | xargs ls -la || echo "    ‚ö†Ô∏è No podspec files found"
            else
              echo "    ‚ùå $PLUGIN directory missing"
            fi
          done
          
          # Forcer l'installation des pods
          echo "üöÄ Tentative d'installation des pods..."
          COCOAPODS_DISABLE_STATS=true pod install --repo-update --verbose
          
          # Si l'installation √©choue, essayer avec --allow-root et autres options
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Premi√®re tentative d'installation des pods √©chou√©e, essai avec options alternatives..."
            COCOAPODS_DISABLE_STATS=true pod install --repo-update --verbose --allow-root
            
            # Si √ßa √©choue encore, essayer avec --no-clean
            if [ $? -ne 0 ]; then
              echo "‚ö†Ô∏è Seconde tentative √©chou√©e, essai avec --no-clean..."
              COCOAPODS_DISABLE_STATS=true pod install --repo-update --verbose --no-clean
            fi
          fi
          
          # V√©rifier si l'installation a r√©ussi
          if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
             echo "‚úÖ Installation des pods r√©ussie."
          else
             echo "‚ùå √âchec de l'installation des pods apr√®s plusieurs tentatives."
             # Afficher le contenu du r√©pertoire pour le d√©bogage
             ls -la
             
             # Tenter une approche alternative avec bundle
             echo "üîÑ Tentative avec bundler..."
             sudo gem install bundler
             bundle init
             echo "gem 'cocoapods', '1.12.1'" >> Gemfile
             bundle install
             bundle exec pod install --repo-update
             
             # V√©rifier √† nouveau
             if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
                echo "‚úÖ Installation des pods r√©ussie avec bundler."
             else
                exit 1
             fi
          fi
          
          # Afficher le Pods/Manifest.lock pour d√©boguer
          if [ -f "Pods/Manifest.lock" ]; then
            echo "üìã Contenu de Pods/Manifest.lock:"
            head -n 50 Pods/Manifest.lock # Afficher les 50 premi√®res lignes
          else
            echo "‚ö†Ô∏è Pods/Manifest.lock non trouv√©"
          fi

      - name: Verify Apple Pay Merchant ID in Entitlements
        script: |
          cd ios
          if [ ! -f "Runner/Runner.entitlements" ]; then
            cat > Runner/Runner.entitlements << EOL
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.developer.in-app-payments</key>
    <array>
        <string>merchant.fr.choiceapp.app</string>
    </array>
</dict>
</plist>
EOL
            echo "‚úÖ Fichier d'entitlements Apple Pay cr√©√©"
          else
            echo "‚úÖ Fichier d'entitlements existant"
          fi
          if ! grep -q "merchant.fr.choiceapp.app" Runner/Info.plist; then
            plutil -insert 'com.apple.developer.in-app-payments' -xml '<array><string>merchant.fr.choiceapp.app</string></array>' Runner/Info.plist || true
            echo "‚úÖ Merchant ID ajout√© √† Info.plist"
          fi

      - name: Apply iOS 14.0 Deployment Fix in Xcode Info.plist
        script: |
          cd ios
          plutil -replace MinimumOSVersion -string "14.0" Runner/Info.plist
          plutil -replace LSRequiresIPhoneOS -bool YES Runner/Info.plist

      - name: Install certificate in keychain
        script: |
          echo $CM_CERTIFICATE | base64 --decode > ios_distribution.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import ios_distribution.p12 -k build.keychain -P "$CM_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          echo "‚úÖ Certificat install√© dans le keychain"

      - name: Debug keychain and provisioning
        script: |
          echo "== Profils de provisionnement =="
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "== Certificats dans le keychain =="
          security find-identity -v -p codesigning
          echo "== Team ID utilis√© =="
          echo $CM_APP_STORE_CONNECT_TEAM_ID

      - name: Build iOS IPA with Proper Signing
        script: |
          flutter build ipa --release
          echo "‚úÖ Build iOS avec signature termin√©"
          if [ -f "build/ios/ipa/app-release.ipa" ]; then
            echo "üéâ IPA sign√© g√©n√©r√© avec succ√®s"
          else
            echo "üîç Recherche d'autres IPAs g√©n√©r√©s..."
            find build -name "*.ipa"
          fi

    artifacts:
      - build/ios/ipa/*.ipa

    publishing:
      email:
        recipients:
          - "remi.barbier@hec.edu"
