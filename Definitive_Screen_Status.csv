Screen Name;Interface (User/ProducerX);Current Status (%);Issues / Gaps;Linked Backend/API;UI/UX Review Needed?;Expected Outcome
LanguageSelectionScreen;First Launch (All);20%;"**Functional:** Basic language selection UI.\n**Needs Improvement :** Ensure preference persistence if user registers immediately after selection for the initially selected language.\n**To Implement:** Full implementation and operationalization of English and Spanish language options throughout the entire application. All text, labels, and dynamic content need to be translatable and correctly displayed based on user selection. Ensure `easy_localization` is fully integrated and functional for all screens and components for these languages.";"`SharedPreferences` (Local), Optional: `PUT /api/users/preferences`. Requires full setup of `easy_localization` with EN & ES translation files.";Yes (for new languages);"Seamless and robust language selection (including English and Spanish) persistent across user sessions/profiles and operational throughout the entire application."
LandingPage;Unauthenticated;25%;"**Functional:** Basic Producer Search (`/api/unified/search`) if data exists. Basic Direct Producer Login (`/api/auth/login-with-id`) if account is already claimed and credentials known.\n**Needs Improvement :** UI guidance for producer claim vs. recover flow. Clearer visual distinction between user/producer paths. Frontend route for `/recover` exists but lacks robust UI for claim submission.\n**To Implement:** Display actual Choice App logo. **Producer Account Recovery/Claiming**: The current 'Recover Account' is NOT a functional claiming process. Needs: Full backend logic for **producer profile claiming** (`POST /api/auth/claim-producer-profile`) including robust justification/proof submission (UI for file upload, text fields on `/recover`), verification workflow (admin review, automated checks), and account linking. Suspension mechanism for failed/fraudulent claims. **Streamlined Producer Account Creation**: A 2-3 click process initiated from Landing Page to efficiently gather all necessary information for various producer types and create their accounts. Dynamic content display (trending Choices/Interests).";"`GET /api/unified/search` (functional for basic search), `POST /api/auth/login-with-id` (functional for already claimed). Needs: `POST /api/auth/claim-producer-profile` (new backend logic, file handling, verification state machine for claims, suspension logic). Needs new or enhanced `POST /api/auth/register-producer` to support streamlined creation with all necessary fields for different producer types, potentially new intermediary APIs. Backend review process for claims.";Yes;"Engaging Landing Page with official Choice logo. Clear, distinct, and fully functional onboarding paths: 1. Users (login/create). 2. Producers: Streamlined 2-3 click account creation. 3. Producers: Secure and verifiable profile claiming process for existing unmanaged listings, requiring proof. Dynamic content for engagement."
LoginUserPage;User;70%;"**Functional:** Basic email/password login.\n**Needs Improvement :** UI/UX polish.\n**To Implement:** Google Sign-In (frontend & backend OAuth). Fetching Google profile info & contacts (with consent) to suggest friends/invites. Feature to add 'Proches' (close friends/family) via phone contacts (UI for permission, contact list access, backend processing for invites/connections). 'Remember me' option.";"Basic: `POST /api/auth/login`. Needs: Backend for Google OAuth (`/api/auth/google`, `/api/auth/google/callback`). APIs for contact processing & friend suggestions (`POST /api/users/suggest-friends-from-contacts`).";Yes;"Secure, reliable login with Email/Password AND Google Sign-In. Seamless onboarding via Google contacts & phone contacts for finding/adding 'Proches'."
RegisterUserPage;User;85%;"Standard registration. Add social signup options? Profile completion prompts?";"`POST /api/auth/register` or `POST /api/newuser/register`";No;"Simple, secure user account creation, potentially with social options."
RegisterRestaurantProducerPage;Producer (Restaurant);60%;"Robust validation needed (incl. duplicate checks). Needs clear link to claiming existing profile first. UI for detailed initial setup (menu structure?).";"`POST /api/auth/register-producer` (type: RestaurantProducer) or `POST /api/producers/register`. Needs check against existing producers.";Yes;"Comprehensive, validated registration *after* checking for existing claimable profiles. Guidance for initial profile setup."
RegisterLeisureProducerPage;Producer (Leisure);60%;"Robust validation needed. Link to claiming existing profile first. UI for initial event/activity type setup?";"`POST /api/auth/register-producer` (type: LeisureProducer) or `POST /api/leisure-producers/register`. Needs check against existing producers.";Yes;"Comprehensive, validated registration *after* checking for existing claimable profiles. Guidance for initial profile setup."
RegisterWellnessProducerPage;Producer (Wellness);60%;"Robust validation needed. Link to claiming existing profile first. Needs UI to define initial `criteria_ratings` upon registration.";"`POST /api/auth/register-producer` (type: WellnessProducer) or `POST /api/wellness/register`. Needs check against existing producers. Needs handling for initial criteria.";Yes;"Comprehensive, validated registration *after* checking for existing claimable profiles, including mandatory initial rating criteria setup."
RecoverProducerPage;Producer;30%;"**Core Gap**: Implementation of profile **claiming** logic. Needs UI for proof upload (securely). Backend needs verification workflow (manual admin or automated). Clear UI distinction between password recovery and profile claiming needed.";"Needs: `POST /api/auth/claim-producer-profile` (backend logic, file handling, verification state machine). Existing `/recover-producer` likely only handles password reset.";Yes;"Secure, verifiable, and distinct processes for 1) claiming existing profiles (with proof) and 2) recovering access to already managed accounts."
ResetPasswordScreen;User/Producer;70%;"**Functional:** Basic password reset mechanism assumed.\n**Needs Improvement :** UI/UX polish for clarity, error handling, and security feedback.\n**To Implement:** Full end-to-end testing and hardening of the token generation, email delivery, and password update process to ensure robustness for all user types and edge cases.";"`POST /api/auth/reset-password/{token}` (ensure this API is fully robust and secure).";Yes;"Fully functional, secure, and user-friendly password reset process for all account types, with clear instructions and error handling."
FeedScreen;User, Guest;15%;"**Functional:** Basic post display structure (if `/api/posts/feed` returns data).\n**Needs Improvement :** Major performance optimization for infinite scroll & large datasets. UI for all media types (ensure actual video for reels). Consistent profile linking. Robustness of basic like/comment for standard posts.\n**To Implement:** **Core Feed Algorithm** (backend: complex blending of friend Choices-as-Posts, friend Interests for entities with social context e.g., 'Marie is interested in Event X (target of producer post), check it out!'), producer posts, AI recommendations). **Distinct Visuals**: Different card designs for User Choices, User Posts, Producer Posts, Interests (with micro-social proof: ""X chose this""). **Full Interaction Suite**: Like/Comment on all content types (Choices, Posts from producers), including liking individual comments. **Contextual Interest Button**: On Producer posts (for specific events/places/items mentioned), linking Interest to specific entity. Users express Interest in an ENTITY, not the post itself. **Interest Group Sharing**: UI to select groups for sharing an Interest; Feed to filter based on these groups. **Emoji Support**: Full emoji rendering & input. **Detailed Like View**: UI to see who liked posts/Choices. **UI Cleanup**: Removal of non-functional/placeholder buttons. `+` button at bottom right seems redundant if main nav FAB exists for 'New Choice'. Implement advanced, faceted filtering and sorting options. Ability to share content to User Groups.";"Needs: New **Feed API** (`/api/feed/{userId}` for complex blending, AI, group filters, entity-linked Interests, detailed like counts, tiered visibility boosts, micro-social proof data). **Extended Interaction API** (`POST /api/interactions`) for all actions (like post, like comment, like choice, share choice, etc.) on all content types. `POST /api/interests` (contextual, specific entity linking, group sharing metadata). Robust media handling (CDN/API). `GET /api/choices/user/{userId}/network`, `GET /api/interests/user/{userId}/network` (with group support). API to view likers. APIs for sharing to groups (`POST /api/posts/{postId}/share-group`).";Yes (Major Overhaul);"Instagram-level Feed: Lightning-fast, visually stunning, hyper-personalized. Algorithmically blends network Choices (as rich posts), network Interests for entities (with social cues & group filtering), producer content (potentially boosted by tier, with micro-social proof) & AI recs. Full, intuitive interaction suite on all items. Handles all media seamlessly. Zero redundant UI elements. Advanced filtering/sorting and seamless sharing to user groups. Potential default screen or easily accessible from main navigation."
MapRestaurantScreen;User, Guest;25%;"**Functional:** Basic map display, marker placement if data is fetched.\n**Needs Improvement :** UI/UX consistency with other map screens (transitions, marker/popup design, filter appearance). Performance with many data points. Implement advanced, faceted filtering and sorting options for map results/list view.\n**To Implement:** **Stylized Markers & Rich Pop-ups**: Show key place image, short description, aggregated Choice rating, network Interest count (e.g., '3 friends interested'), micro-social proof (""X Chose here""), stylized indication of recent network Choices. **Comprehensive Filtering**: By cuisine, price, rating, specific menu items (if feasible), friend Choices/Interests for restaurants. **Dynamic Filter Coloring**: Map markers/areas change appearance based on selected filters or density of matching Choices/Interests. **Viewport-Based Search**: Results update automatically as user moves the map. Correct deep-linking to `ProducerScreen`.";"Needs: Enhanced map endpoint (`/api/producers/map-choices-interests` supporting rich data for popups including micro-social proof, viewport queries, all filters). `POST /api/interests` integration. Backend logic for aggregating network Choices/Interests per location.";Yes (Major Overhaul);"Unified Map UI: Consistent, beautiful, highly performant map for restaurants. Rich, interactive pop-ups with social proof. Powerful, dynamic filtering (incl. social signals & live viewport search). Seamless navigation to profiles."
MapLeisureScreen;User, Guest;25%;"**Functional:** Basic map display.\n**Needs Improvement :** UI/UX consistency, marker/popup design, performance. Implement advanced, faceted filtering and sorting options for map results/list view.\n**To Implement:** **Stylized Markers & Rich Pop-ups**: Event/venue image, description, Choice rating, network Interest count, micro-social proof, recent network Choices. **Comprehensive Filtering**: By activity type, event category, date ranges, friend Choices/Interests. **Dynamic Filter Coloring**. **Viewport-Based Search**. Correct deep-linking to `ProducerLeisureScreen`/`EventLeisureScreen`.";"Needs: Enhanced map endpoint (`/api/leisure/map-choices-interests` supporting rich data including micro-social proof, viewport queries, all filters). `POST /api/interests` integration. Backend logic for network Choice/Interest aggregation.";Yes (Major Overhaul);"Unified Map UI: Consistent, beautiful, highly performant map for leisure. Rich, interactive pop-ups with social proof. Powerful, dynamic filtering (incl. social signals & live viewport search). Seamless navigation to profiles/events."
MapWellnessScreen;User, Guest;25%;"**Functional:** Basic map display.\n**Needs Improvement :** UI/UX consistency, marker/popup design, performance. Implement advanced, faceted filtering and sorting options for map results/list view.\n**To Implement:** **Stylized Markers & Rich Pop-ups**: Center image, description, Choice rating (based on its criteria), network Interest count, micro-social proof, recent network Choices. **Comprehensive Filtering**: By service type, specific wellness criteria ratings, friend Choices/Interests. **Dynamic Filter Coloring**. **Viewport-Based Search**. Correct deep-linking to `WellnessProducerScreen`.";"Needs: Enhanced map endpoint (`/api/wellness/map-choices-interests` supporting rich data including micro-social proof, viewport queries, all filters). `POST /api/interests` integration. Backend logic for network Choice/Interest aggregation.";Yes (Major Overhaul);"Unified Map UI: Consistent, beautiful, highly performant map for wellness. Rich, interactive pop-ups with social proof. Powerful, dynamic filtering (incl. social signals & live viewport search). Seamless navigation to profiles."
MapFriendsScreen;User;25%;"**Functional:** Basic display of friend locations (if shared and data is available).\n**Needs Improvement :** Accuracy/privacy controls refinement & clear UI. Deep-linking to `ProfileScreen`. Performance/battery impact for real-time aspects.\n**To Implement:** **Advanced Friend Filtering:** By recent Choices (e.g., 'Friends who Chose Italian Food'), by Interests (e.g., 'Friends interested in Concerts'), by user-defined friend groups (e.g., 'Promo HEC 2022').\n**Choice/Interest Density Overlay:** Color-code map areas based on concentration of filtered friends' Choices/Interests.\n**Search Any User & View Their Public Activity:** UI to search for any public Choice user. Display their publicly shared Choices and Interests as stylized, distinct markers on the map (respecting privacy). Clicking markers leads to Choice/Interest detail or related entity. Deep linking to selected user's `ProfileScreen`.";"`GET /api/friends/map-data/{userId}` (needs major enhancement for advanced filtering by friend's Choices/Interests, group membership, and fetching relevant geo-data for overlays). Needs: APIs to query friend's recent Choices/Interests with geo-tags (`GET /api/friends/activity-map-filter?type=choice&criteria=italian_food`). `GET /api/users/search-map-activity?query=X`. `GET /api/users/{id}/map-activity`. Friend group management APIs if that feature is built.";Yes (Major Overhaul);"Privacy-centric map of friends' locations. Powerful social discovery by filtering friends by their Choices/Interests, with visual density overlays. Ability to search any public user and see their shared map activity, transforming the map into an intelligent social exploration tool. Potential to be the primary landing screen for users to foster immediate social discovery."
ProducerSearchPage;User, Guest;15%;"**Functional:** Basic search input UI, placeholder for trending sections.\n**Needs Improvement :** Rename to 'Explore' or 'Discovery' Page. UI/UX to be harmonized with overall app style. Existing trending sections show static/mock data. Implement advanced, faceted filtering and sorting options for search results.\n**To Implement:** **Core Backend Overhaul for Dynamic Content:** \n1. **Trending Algorithm**: Implement dynamic scoring (`views*0.5 + clicks*1 + saves*2 + shares*3 + presenceNearby*2 - timeDecayFactor`). Factor in geolocated activity peaks. Requires comprehensive `activity_logs` (userId, action, placeId, lat, lng, timestamp, `last_interaction_timestamp`). \n2. **Geo-Indexing & Clustering**: Backend to associate places with lat/lng, city, and dynamic `cluster_id` (500m, 1km, 2km zones) for localized trend grouping ('autour de moi', by neighborhood). \n3. **Enhanced User Activity Tracking**: Extend `AppDataSenderService` for `screen_view`, `map_view`, `event_click`, `restaurant_detail_loaded`, `cta_click`. Batch process logs frequently (e.g., every 15 mins) to update trends. \n4. **Real-time Data Connection**: Frontend consumes frequently updated trending/nearby scores. \n5. **'Around Me' Functionality**: Sections like 'Le plus populaire autour de vous' driven by actual user location & new backend logic. \n6. **AI Cross-Recommendations (Optional)**: Lightweight collaborative filtering. \n7. **Advanced Filtering/Sorting**: For search results, based on new backend capabilities (including priority for premium producers). \n8. **Direct 'Add Interest'**: UI/backend from search/explore results.\n**Curated Zones/Mini City Guides:** Sections like 'Quartier Japonais à Opéra' or 'Paris for Jazz Fans'.\n**Mood-Based Filtering/Sorting:** Allow users to filter/sort by moods like 'détente', 'exploration', 'romantic date'.\n**'What's Buzzing Now' Section:** Display highly interactive/trending Choices or Interests (with micro-social proof), making content potentially viral.";"Existing: `GET /api/unified/trending-public`, `GET /api/unified/nearby-public` (both need complete overhaul to be dynamic & personalized). `GET /api/unified/search` (needs enhanced filtering/sorting, and logic for tiered producer visibility). \nNeeds: New/Overhauled APIs for dynamic trending (`/api/explore/trending?lat=X&lng=Y&clusterId=Z&mood=X`), nearby (`/api/explore/nearby?lat=X&lng=Y`), and clustered trends (including buzzing/viral logic). `POST /api/activity-log` (comprehensive). `POST /api/interests`. `GET /api/explore/curated-zones`. Optional: `GET /api/ai/recommendations/explore`.";Yes (Major Overhaul);"Dynamic 'Explore/Discovery' Screen (renamed): Twitter-like trending for local experiences, hyper-localized 'around me' sections, curated guides, mood-based suggestions, and viral trending content. Advanced search filters with premium producer visibility. Seamless 'Add Interest' actions. An inspiring screen that encourages discovery within the user's own city."
CopilotScreen;User;5%;"**Functional:** (Likely placeholder UI shell only).\n**Needs Improvement :** **UI/UX Overhaul**: Complete redesign for natural conversational flow, clear display of diverse results (stylized lists, cards, map snippets, user profile cards). Loading/error states. \n**To Implement:** **Ultra-Powerful AI Backend**: \n1. **Versatile Query Handling**: Understand complex natural language (e.g., 'friends' Choices/Interests for X', 'discounted noodle restaurants near me tonight'). \n2. **Data Source Integration**: AI must query all relevant DB collections (`Choices`, `Interests`, `Users`, `Producers`, `Events`, `Offers`, `locationHistory`, `UserGroups`, `Collections`). \n3. **Entity Recognition & Actionable Results**: Identify users, places, events. Results must be interactive (deep-linking to profiles, place details, event details). \n4. **Voice Input (Optional)**. \n5. **External AI Model Dependency**: Acknowledge reliance on models like GPT (OpenAI API). Address API costs, rate limits, data privacy, latency. Need for an abstraction layer for AI services. Backend: `POST /api/ai/copilot` needs to orchestrate calls to external AI, internal DB queries, and result formatting. User feedback mechanism for AI suggestions. Display ""AI used from X data"" for transparency.";"""Needs: Heavily enhanced `POST /api/ai/copilot` (or new `/api/ai/user-assistant`) for complex NLP, querying all DBs, interfacing with external AI (e.g., OpenAI), formatting rich results. `GET /api/ai/recommendations/{userId}`. `POST /api/ai/copilot/feedback`. Robust error handling and consideration for API costs/limits of external AI services.""";"""Yes (Major Overhaul)""";"""Highly intelligent & versatile AI assistant: Understands complex conversational queries (text & optional voice). Seamlessly queries all internal data & external AI. Returns rich, stylized, and actionable results (places, events, user profiles) with clear deep-linking. Transparent about AI dependencies/costs and data sources used for suggestions."""
MyProfileScreen;User;30%;"**Functional:** Basic profile info display (`_fetchUserProfile` from `myprofile_screen.dart` exists). Rudimentary post display. Basic Tab structure.\n**Needs Improvement :** **UI/UX Overhaul for Tabs**: Current Interest/Choice/Post displays are placeholders or basic. Needs visually appealing, Instagram-like card designs for each content type within tabs. Ensure smooth scrolling and loading. Clear indication this is the **logged-in user's** management screen. `EditProfileScreen` navigation exists - ensure all fields are manageable & UI is polished.\n**To Implement:** **'Coup de Coeur' (Favorite Choice of the Month)**: Full backend (`POST /api/users/{userId}/favorite-choice`) and frontend logic (UI for selection dialog `_showFavoriteChoiceDialog`, prominent stylized display on profile, 'View/Change Favorite Choice' button). **Manage Own Content**: Full CRUD for own Choices & Interests (Edit/Delete UI, link to backend APIs). **'Coups de coeur' (General Bookmarks/Favorites)**: UI to add/remove *any* content (Producers, Events, specific Choices, Interests, Posts, Menu Items) as a favorite/bookmark. Dedicated, beautifully designed section/tab in profile to view & manage these. **Full Account Management Settings (Instagram-Level)**: Comprehensive and functional sections for: Privacy (profile, post, choice visibility, with dynamic public/private option per section), Navigation to `NotificationSettingsScreen`, Blocked Users (view/unblock), Activity Log (own recent interactions), Security (password change, 2FA - future), Linked Accounts. Navigation to `MyCollectionsScreen`. Prominent display of user's key badges, points total, and a link/navigation to `UserAchievementsScreen`. **Visual Identity:** Display a 'Choice Style' badge or visual aura based on the predominant types of Choices the user makes (e.g., 'Gastronome', 'Cultural Explorer').";"Existing: `GET /api/users/{userId}`, `PUT /api/users/profile/update` (needs to support granular visibility toggles), `GET/PUT /api/preferences` (needs to support granular visibility toggles), `POST /api/users/{userId}/favorite-choice` (backend likely exists). Needs: `DELETE /api/choices/{id}`, `PUT /api/choices/{id}`. `DELETE /api/interests/{id}`, `PUT /api/interests/{id}`. New Bookmark API (`POST/DELETE /api/bookmarks`, `GET /api/users/{userId}/bookmarks`). APIs to fetch own Choices/Interests. Backend for all missing settings sections. CRUD APIs for Collections (see `MyCollectionsScreen`). `GET /api/users/{userId}/achievements` (summary for profile display). Backend logic to analyze user's Choice patterns and assign a style; `GET /api/users/{userId}/choice-style`.";Yes (Major Overhaul);"Instagram-level **logged-in user profile**: Polished UI. Fully functional 'Favorite Choice of the Month'. Beautifully presented tabs for user's own Interests, Choices, Posts. Full CRUD for own content. Comprehensive 'Bookmarks/Favorites' system. Robust account management including notification settings, granular privacy controls, and access to collaborative collections. Profile reflects user's personality through a 'Choice Style' and showcases user engagement and status through gamification elements."
ProfileScreen;User, Guest;30%;"**Functional:** Basic public profile display structure (name, bio, photo from `profile_screen.dart`).\n**Needs Improvement :** UI/UX to align with `MyProfileScreen`'s polish but for public view, ensuring clear distinction. Robust Follow/Unfollow button states & actions. Friend request state handling (Pending, Accept/Decline UI if applicable here or via notifications).\n**To Implement:** **Content Tabs**: Display of target user's *public* Choices, *public* Interests, and *public* Posts in separate, styled tabs. Display public User Groups and public Collections/Lists they are part of. Display of target user's publicly visible key badges, points total, and 'Choice Style' badge.";"`GET /api/users/{userId}/public` (needs significant extension to include public Choices, Interests, Posts, Groups, Collections, public achievements (badges, points summary), and 'Choice Style' badge, respecting privacy settings of target user). `POST /api/friends/request`, `POST /api/users/follow` (needs robust state management for follow/friendship status).";Yes;"Clear, informative, and visually appealing public view of other users, showcasing their shareable Choices, Interests, Posts, Group memberships, Collections, 'Choice Style', and public achievements (respecting privacy). Smooth follow/friending actions with clear status visibility."
MessagingScreen;User, Producer;15%;"**Functional:** Basic 1-to-1 text messaging framework (APIs likely exist).\n**Needs Improvement :** Current UI/UX is likely very basic. Performance with many messages/conversations. Reliability of real-time updates (WebSockets).\n**To Implement:** **Full Instagram DM Feature Parity (User & Producer Contexts)**: Group chats (create, manage, add/remove users). @Mentions in chats (UI suggestions, backend parsing & notifications). Initiate Video/Audio calls directly from chat. Read receipts. Typing indicators. Robust message search within conversations & across all chats. Seamless rich media handling (images, videos, GIFs - upload, display, storage). **Producer Specific Tools**: UI & Backend for Quick Replies & Canned Responses. Ability to easily link/share producer's own services/events/offers directly within a chat. Backend APIs for all new features.";"Existing: `GET /api/conversations`, `GET /api/messages`, `POST /api/conversations/send`, WebSockets. Needs: Group Chat APIs (`POST /api/conversations/group`, `PUT .../group/{id}/members`, etc.). @Mention backend logic. Call initiation logic from chat. Enhanced WebSocket events for read receipts & typing. Message Search API (`GET /api/messages/search?query=X`). Media Upload API (`POST /api/media/message`). Producer Quick Reply/Canned Response CRUD APIs (`GET/POST/PUT/DELETE /api/producers/message-templates`).";Yes (Major Overhaul);"Instagram DM equivalent for Users. For Producers: all user features + powerful CRM-like tools (quick/canned replies, direct sharing of services/offers) for efficient client communication. Fully featured (groups, calls, mentions, GIFs, media, search, read receipts)."
VideoCallScreen;User;25%;"WebRTC implementation needed. Call quality management. Basic UI exists, but needs refinement for reliability. Screen sharing/group calls are future considerations.";"WebSockets (Signaling), `POST /api/calls/initiate`, `/accept`, `/end`. Needs robust WebRTC backend/signaling.";Yes;"Stable, high-quality 1-to-1 video/audio calls as baseline."
ChoiceCreationScreen;User;30%;"**Functional:** Type selection. Location search/selection. Location verification (`POST /api/choices/verify`). Basic comment input. Core Choice data submission (`POST /api/choices`). Fetching producer menu/criteria.\n**Needs Improvement :** UI for multi-facet rating. 'Create Post' flow. Verification feedback.\n**To Implement:** Photo/video upload. **'With Whom' Feature**: UI to tag/indicate companions (friend list, free text?). Backend to store this. Privacy settings for Choice/Post. Draft saving. AI menu augmentation display. **Interest Creation**: Define separate flow/UI for Interests (pre-experience). Option to share created Choice/Interest to User Groups.";"Uses existing APIs. Missing: Media API, Tagging/Companion API (`PUT /api/choices/{id}/companions`), Privacy API, Draft API. Payload extension for `POST /api/choices` for 'companions'. Separate `POST /api/interests` flow/UI. API for sharing Choice/Interest to group (`POST /api/choices/{choiceId}/share-group`, `POST /api/interests/{interestId}/share-group`).";Yes;"**Choices (Post-Experience):** Seamless creation with media, 'with whom' tagging, privacy, drafts, and group sharing. **Interests (Pre-Experience):** Separate, equally intuitive flow for creating Interests, also with group sharing."
ProducerFeedScreen;All Producers;10%;"**Functional:** Placeholder for feed display.\n**Needs Improvement :** **UI/UX Overhaul**: Aim for Instagram-level visual appeal & interaction, tailored for producer needs. Ensure full media support (view large, all formats) & consistent profile linking from all items. Producers CANNOT emit Interests (this is a user action on entities). Implement advanced, faceted filtering and sorting options.\n**To Implement:** **Advanced Feed Algorithm**: Backend logic for content mix: 1. Interactions on *own* profile/posts/events/services (new followers, Choices, comments, Interests in their offerings). 2. Posts from users/producers they follow (if this feature is enabled for producers). 3. *Anonymized & Aggregated* nearby competitor activity/trends (complex, requires careful ethical/data consideration, e.g., ""Italian restaurants near you are popular for X dish""). 4. Trending local ""Interests"" for their business category/offerings. **Intelligence**: Algorithm learns from producer interactions to refine relevance. **Interaction Suite**: Producers can Like/Comment on user Choices/posts about their establishment. Can Share UGC (with permission). **Filtering/Sorting**: By date, interaction type, sentiment (AI). Performance. **No Producer Promotions Displayed *Here***: This feed is for *their* insights; promotions appear in *user* feeds/profiles. May show analytics on *their own* promo performance.";"Needs: MASSIVELY Overhauled `GET /api/producer-feed/{producerId}` (complex data aggregation, AI sentiment, competitor/local trend data feeds, filtering/sorting). `POST /api/interactions` (for producer likes/comments on user content about them). `GET /api/local-trends?area=X&category=Y&producerType=Z` (new, for local/competitor insights). Robust APIs for fetching and displaying diverse content types (Choices, user posts, etc.) with all media.";Yes (Major Overhaul);"""Instagram-level professional feed for Producers: Highly relevant, actionable insights from their audience, local market, and (potentially, carefully, and anonymized) competitor context. Full interaction suite for engaging with user content about them. Learns producer preferences. No ""Interest"" creation capability for producers themselves. Advanced filtering for better insights."""
HeatmapScreen;All Producers;5%;"**Functional:** Basic map display placeholder.\n**Needs Improvement :** **UI/UX Uniformity & Enhancement**: Consistent, intuitive interface for all producer types, tailored visualizations.\n**To Implement:** \n**For Restaurant/Wellness Producers:** **""Attract On-Live"" Functionality**: UI for producers to define real-time, hyper-local, time-sensitive offers (e.g., """"End of service: 30% off X for users in 200m, next 1 hour""""). Map reflects these active offer zones. Backend manages dynamic offers (creation, timing, geo-fencing, redemption). User app detects/notifies for these.\n**For Leisure Producers (Analytical & Predictive Focus - potentially tiered access for advanced features):** Contextual Localization: Visualize own events/venues. Market Analysis: Display user Interest concentration by event type (from aggregated internal Choice data) and anonymized competitor event density within a defined radius. Visualize 'Event Success Forecaster' outputs: Overlay recommended zones or highlight areas of opportunity for future events. Post-event geographical analysis: Participant origins (if available/privacy-compliant), map Interest-to-conversion gaps by zone.\n**General:** Clear, actionable display of user density, Choice hotspots, Interest clusters. Performance for large real-time data.";"Needs: Highly dynamic `GET /api/heatmap/{producerId}` (real-time anonymized user activity, producer-defined offer zones, historical trends, type-specific data for leisure/events including Interest concentration, competitor density, participant origin insights, forecast overlays). `POST /api/producers/dynamic-offer` (for restaurant/wellness live offers). User-side `GET /api/live-offers?lat=X&lon=Y&userInterests=Z`. For Leisure: APIs to support 'Event Success Forecaster' visualization overlays. Backend logic for tiered feature access.";Yes (Major Overhaul);"Powerful analytical tool (historical data) AND groundbreaking real-time on-premise engagement system for Restaurants/Wellness. For Leisure Producers: A powerful analytical and predictive tool to understand local demand, competitor landscape, and optimize event strategy through geographical insights, with advanced features potentially tied to premium subscription tiers."
ProducerDashboardIaPage;All Producers;10%;"""**Functional:** Basic UI shell. Route `POST /api/ai/producer-query` exists in `ai.js` for interactive queries.\n**Needs Improvement :** **UI/UX Overhaul**: For complex query input & rich, actionable result display (comparative performance charts, market positioning visuals, optimization suggestions). Integrate data from all sources for AI.\n**To Implement:** **""Surpuissant"" AI Backend**: Models for: 1. Comparative performance analysis (vs anonymized local competitors on similar offerings, based on public Choice data). 2. Menu/service pricing optimization suggestions. 3. Deep customer feedback pattern analysis from Choices/comments. 4. Operational improvement suggestions. **Memory/Context**: AI remembers previous interactions in-session. **Stylized, Clickable Outputs**: Results link to relevant profiles/places for comparison/action. Ensure `ai.js` routes (`/insights/producer`, `/recommendations`, `/producer-insights`) are fully functional, providing deep data and not just surface-level recommendations. **External AI Model Dependency**: Manage GPT-like model usage (cost, latency, data privacy, abstraction). Display ""AI used from X data"" for transparency.";"Primary: `POST /api/ai/producer-query` (from `ai.js` - needs to be extremely robust, capable of complex data aggregation, comparative analytics, advanced external AI interfacing). Supporting: `GET /api/ai/insights/producer/:producerId`, `GET /api/ai/:producerType/:producerId/recommendations`, `GET /api/ai/producer-insights/:producerId` (all from `ai.js` - ensure deep, actionable data). `GET /api/stats/producer/{producerId}` for raw data. Extensive data pipelines for AI models from all relevant internal & external data sources.";Yes (Major Overhaul);"""Truly """"surpuissant"""" AI co-pilot for producers: Deep, actionable advice with memory & context. Comparative analytics. Optimizes pricing, promos, operations based on comprehensive data (own, competitor, market). Results are rich, interactive, and clearly link to sources/actions. Transparent about AI data sources."""
GrowthAndReachScreen;All Producers;5%;"**Functional:** Placeholder screen.\n**Needs Improvement :** Basic UI structure. Needs clear delineation of Free vs. Paid features.\n**To Implement:** **Subscription Tier Management**: Full UI/backend (selection, Stripe/Paypal via `Subscription.js` model, feature access control, lifecycle). **Define Tiered Features & Benefit Highlights**: \n* **Free**: Basic profile views, follower count, total Choices/Interests. (Benefit: 'Get started and be discovered')\n* **Starter (Paid)**: Detailed analytics (demographics, Choice rating trends), some AI tips, basic competitor comparison (anonymized). (Benefit: 'Understand your audience better')\n* **Pro (Paid)**: Advanced analytics (Interest-to-Choice conversion funnels, promo effectiveness), access to advanced Heatmap Analytics (Leisure), initial access to Event Success Forecaster & Optimizer. (Benefit: 'Optimize event profitability & local impact')\n* **Legend (Paid)**: All features, AI automated marketing post suggestions/generation, **max visibility (e.g., boosted feed presence, priority in search/discovery)**, full access to Event Success Forecaster & Optimizer, deepest Heatmap insights. (Benefit: 'Maximize your reach and automate growth')\n**Connect to REAL Data**: Display meaningful metrics (profile views, follower growth, Choice/Interest conversions from their actions, promo redemption). UI for complex metric comparison/visualization.";"Needs: `POST /api/subscriptions/subscribe`, `GET /api/subscriptions/status`, `PUT /api/subscriptions/change-tier`. Payment Gateway Webhook integration (`/stripe-webhooks`). `Subscription.js` model is central. `GET /api/growth-analytics/{producerId}`, `GET /api/stats/summary/{producerId}` (must be tiered, including metrics for boosted visibility if applicable). Analytics on promo redemption (`GET /api/offers/{id}/stats`). Backend logic for feature gating by tier (including Heatmap/Forecaster features) and for implementing visibility boosts.";Yes (Major Overhaul - ensure clear value proposition and ROI for each tier is immediately understandable to producers);"Functional subscription system clearly unlocking valuable tiered features. Dashboard provides clear ROI via real engagement/conversion analytics, justifying subscription costs. Clear distinction between Free and Paid feature sets, including tangible benefits like advanced analytics, forecasting tools, and increased visibility for higher tiers."
MyProducerProfileScreen;RestaurantProducer;20%;"**Functional:** Basic profile data display (name, address from `Producer.js` via `myproducerprofile_screen.dart`).\n**Needs Improvement :** **UI/UX Overhaul**: Needs user-friendly interface for managing complex `structured_data` menu (nested items, categories, modifiers, photos per item). Clear indication this is **logged-in producer's** POWERFUL DASHBOARD. Integration of Post Management. Navigation to `NotificationSettingsScreen`.\n**To Implement:** **Stock Availability**: UI toggle/input per menu item & backend (`PUT /api/producers/{id}/menu/{itemId}/availability`). **Special/New Item Flags**: UI toggle & backend. **Timed Promotions & Dynamic Pricing**: UI for producer to set offers (e.g., """"20% off Pizzas 6-8PM"""") & backend to store these with start/end times. Public `ProducerScreen` & menu data must reflect these live price changes. UI to define specific dishes/offers as targetable by user """"Interests"""". **AI-Powered Promo Optimization (Premium)**: Suggestions for optimal promo timing/discounts. AI-drafted promo posts. Option for AI-automated targeted posts for new offers/events (tier-dependent). **Integrated Performance Stats**: Contextual display of Choice ratings, Interest counts for their specific menu items. 'Verified Producer' badge display if account is claimed/verified. Basic CRM: tag/segment users who interacted/booked. UI/Backend for promo codes for native services/offerings.";"`GET /api/producers/{producerId}`, `PUT /api/producers/{id}/update` (needs to support timed overrides, rich `structured_data` menu updates, stock/special flags, 'isVerified' status). `Offer.js` model. Needs: `POST /api/producers/{id}/timed-offer`. Menu item availability API. Interest target definition handling. Post CRUD APIs linked to producer. AI APIs: `POST /api/ai/producer-action/suggest-promo`, `POST /api/ai/producer-action/generate-post`. APIs to fetch item-specific stats. APIs for promo code management (`POST /api/producers/{producerId}/services/{serviceId}/promocodes`). Basic CRM backend (`POST /api/producers/{id}/crm/tag-user`).";Yes (Major Overhaul);"**Logged-in Restaurant Producer's Dashboard:** Easy, comprehensive profile & highly detailed, visually manageable menu with 'Verified Producer' badge. Full control over dynamic timed promotions (item/category specific) that are instantly live on public views. Define 'Interest'-able items. Manage posts & notifications. AI-assisted marketing (premium). View contextual performance stats. Basic CRM tools and promo code system."
MyProducerLeisureProfileScreen;LeisureProducer;15%;"**Functional:** Basic profile data display. `MyEventsManagementScreen` exists.\n**Needs Improvement :** UI/UX Overhaul for main profile, posts, info sections. More seamless UX for event management (deep linking or direct actions). Navigation to `NotificationSettingsScreen`.\n**To Implement:** Clearly distinguish externally listed events (read-only, link to original source for booking) vs. internally created Choice events (full CRUD, direct booking setup & payment on Choice). UI for creating/editing events *directly* on Choice. Mechanism for producers to set up direct booking/ticketing for their internally created events. Flow for producers to 'add' an existing event listing (from platform-provided data) to manage it as their own native event, including direct booking/payment. 'Verified Producer' badge display. Full post management. Robust Calendar UI for scheduling/viewing. **Timed Promotions** for venue access or specific events/activities. UI to define activities/events targetable by ""Interest"". **AI-Powered Promo/Event Suggestion (Premium)**. **Integrated Performance Stats** (differentiating internal vs. external event performance). Basic CRM: tag/segment users who booked/showed interest. UI/Backend for promo codes for native events. Link to `EventSuccessForecasterScreen`.";"`GET /api/leisure-producers/{id}` (needs to include 'isVerified' status), `PUT .../update`. For *internally managed* events: `POST /api/events`, `PUT /api/events/{eventId}`, `DELETE /api/events/{eventId}` (callable by producer). Calendar UI support. **Needs for internal events:** Backend logic & APIs for direct booking/ticketing management (e.g., `POST /api/events/{eventId}/bookings/setup`, `GET /api/events/{eventId}/bookings`, `PUT /api/events/{eventId}/ticket-inventory`, payment integration). `POST /api/producers/{id}/timed-offer`. Interest target definition. Post CRUD APIs. AI APIs. Event-specific stat APIs (differentiating internal/external). API for 'add managed event' (`POST /api/producers/add-managed-event`). API for managing promo codes (`POST/GET/PUT/DELETE /api/events/{eventId}/promocodes`). Basic CRM backend (`POST /api/producers/{id}/crm/tag-user`).";Yes (Major Overhaul);"**Logged-in Leisure Producer's Dashboard:** Manage profile, posts, notifications with 'Verified Producer' badge. View externally listed events (linking out if necessary). **Crucially, create, manage, and offer direct bookings & payments for their own events natively within Choice.** Ability to convert externally listed events to fully managed native Choice events. Dynamic timed promotions. Define 'Interest'-able offerings. AI-assisted marketing & access to Event Success Forecaster (potentially tiered). View contextual performance. Basic CRM tools and promo code system."
MyWellnessProducerProfileScreen;WellnessProducer;20%;"**Functional:** Basic profile data display.\n**Needs Improvement :** UI/backend for **customizing/updating** `criteria_ratings` beyond initial setup. Clear indication this is **logged-in producer's** DASHBOARD. UI/UX Overhaul for main sections, services list. Navigation to `NotificationSettingsScreen`.\n**To Implement:** Staff/Practitioner profile linkage UI/backend (create/link profiles, assign to services). Booking information fields/integration options for services. **Timed Promotions** for specific services/classes. UI to define services/classes targetable by ""Interest"". Full post management. **AI-Powered Service Bundling/Promo Suggestions (Premium)**. **Integrated Performance Stats** for services. 'Verified Producer' badge display if account is claimed/verified. Basic CRM: tag/segment users who booked/showed interest. UI/Backend for promo codes for native services/offerings.";"`GET /api/wellness/{id}` (needs to include 'isVerified' status), `PUT .../update`. Needs: Staff profile linkage API (`POST/PUT /api/wellness/{id}/staff`). API to update `criteria_ratings` (`PUT /api/wellness/{id}/criteria`). Booking handling logic/APIs. `POST /api/producers/{id}/timed-offer` (for wellness services). Interest target definition. Post CRUD APIs. AI APIs. Service-specific stat APIs. APIs for promo code management (`POST /api/wellness/{producerId}/services/{serviceId}/promocodes`). Basic CRM backend (`POST /api/producers/{id}/crm/tag-user`).";Yes (Major Overhaul);"**Logged-in Wellness Producer's Dashboard:** Manage profile, posts, notifications, custom rating criteria, services, practitioners with 'Verified Producer' badge. Dynamic timed promotions. Define 'Interest'-able services. AI-assisted marketing (premium). View contextual performance. Basic CRM tools and promo code system."
ProducerScreen;User, Guest, Producer;40%;"**Functional:** Basic display of producer info (name, address, photo from `producer_screen.dart`). Tab structure for Info, Menu, Posts, Avis.\n**Needs Improvement :** **UI/UX Overhaul**: Aim for Instagram x Yelp hybrid style. Info tab should be default & prominent. 'Avis' tab should be replaced/merged into a rich 'Choices' tab (displaying structured Choices about this producer, with micro-social proof). Menu tab needs better visual display of `structured_data` (with micro-social proof on items). Post tab needs refined card display (with micro-social proof). Performance with large menus/many posts. Implement advanced, faceted filtering and sorting options for posts/choices.\n**To Implement:** **Social Stats Display**: Prominent, stylized display of Followers, total ""Interests"" for the place, total ""Choices"" for the place, with network context ('X friends interested/Chose here'). Clickable stats leading to user lists (respecting privacy). **Dynamic Menu Prices & Promotions**: Menu items must reflect active timed promotions set by producer. Clear visual indicators for promotions/discounts. **Map Integration**: Embedded, clickable map snippet showing location, linking to `MapRestaurantScreen`. **'Express Interest' Button & Share with Group**: For the restaurant itself or specific highlighted menu items/offers. Link to `POST /api/interests` and new `POST /api/users/share-interest-with-group`. **Follow/Unfollow Button** (functional & styled). Display 'Verified Producer' badge.";"`GET /api/producers/{producerId}` (needs to be significantly enhanced to return aggregated social stats, network context for viewer, details of active timed promotions, 'isVerified' status, micro-social proof data, and fully resolved `structured_data` for menu, and user Choices about this producer). `POST /api/interests`. `POST /api/users/share-interest-with-group` (new). `POST /api/producers/{id}/follow` (if not covered by a general follow API).";Yes (Major Overhaul);"Compelling public restaurant profile (Instagram x Yelp hybrid): Prioritizes essential info. Rich, interactive display of menu with live promotions & social proof. Clear social proof (Choices, Interests, follower context) and 'Verified Producer' badge. Easy Interest expression & sharing with groups. Integrated map view. Follow functionality. Advanced filtering for content."
ProducerLeisureScreen;User, Guest, Producer;35%;"**Functional:** Basic display of leisure producer info from `producerLeisure_screen.dart`.\n**Needs Improvement :** **UI/UX Overhaul**: Unify with `ProducerScreen` style. Make event listings more engaging (with micro-social proof). Performance. Implement advanced, faceted filtering and sorting options for events.\n**To Implement:** **Social Stats Display**: Similar to `ProducerScreen` (Followers, Interests for venue, Choices for venue). **Engaging Events Tab**: Visually rich list of upcoming/past events (from `GET /api/events/producer/{producerId}`), with micro-social proof. Each event clickable to `EventLeisureScreen`. Allow direct ""Interest"" expression on listed events. **Posts Tab**. **Timed Promotions Display** (for venue or specific events). **Map Integration**. **'Express Interest' Button & Share with Group** (for the venue or specific events). **Follow/Unfollow Button**. Display 'Verified Producer' badge. Clearly differentiate events bookable on Choice vs. external links.";"`GET /api/leisureProducers/{producerId}` (needs social stats, active promos, Choices about this venue, 'isVerified' status, micro-social proof data). `GET /api/events/producer/{producerId}` (needs to return event source/booking type, micro-social proof data). `POST /api/interests` (for venue or specific events). `POST /api/users/share-interest-with-group`.;Yes (Major Overhaul);"Engaging public leisure profile with 'Verified Producer' badge: Clear, attractive event listings with Interest CTAs, booking source indication, and social proof. Social proof (Choices/Interests). Live promotions. Map view. Unified UI. Follow functionality. Advanced event filtering."
WellnessProducerScreen;User, Guest, Producer;35%;"**Functional:** Basic display of wellness producer info from `wellness_producer_screen.dart`.\n**Needs Improvement :** **UI/UX Overhaul**: Unify with `ProducerScreen` style. Make service listings clearer (with micro-social proof). Implement advanced, faceted filtering and sorting options for services.\n**To Implement:** **Social Stats Display**. **Services Tab**: Clear, attractive listing of services offered (descriptions, durations, prices that reflect timed promotions, micro-social proof). Allow ""Interest"" expression on specific services. **Practitioner/Staff Info Section** (if data available). **Posts Tab**. **Timed Promotions Display**. **Map Integration**. **'Express Interest' Button & Share with Group** (for the center or specific services). **Follow/Unfollow Button**. Display 'Verified Producer' badge.";"`GET /api/wellness/{placeId}` (needs social stats, active promos, detailed service list, Choices about this venue, 'isVerified' status, micro-social proof data). `POST /api/interests` (for center or specific services). `POST /api/users/share-interest-with-group`.;Yes (Major Overhaul);"Informative public wellness profile with 'Verified Producer' badge: Detailed services with live promotions, Interest CTAs, and social proof. Social proof (Choices/Interests). Map view. Unified UI. Follow functionality. Advanced service filtering."
EventLeisureScreen;User, Guest, Producer;35%;"**Functional:** Basic event detail display from `eventLeisure_screen.dart`.\n**Needs Improvement :** **UI/UX Overhaul** for engagement and clarity. Display all relevant fields from `event.js` model (lineup, accessibility, age restriction, language etc.).\n**To Implement:** **Social Proof**: Display number of ""Interests,"" micro-social proof (e.g. ""X people interested""). For native Choice events: Display # of RSVPs / 'Going', potentially avatars of friends interested (respecting privacy). **Prominent 'Express Interest' & Share with Group Button**: For the event. If event is flexible (e.g. recurring), allow suggesting dates/times when sharing Interest with a group. **Add to Calendar** (link to `InterestCalendarSyncScreen` flow or direct calendar event creation). Clear link back to `ProducerLeisureScreen`. **Real-time Promotion Display**: Show event-specific timed promotions. Clear indication if booking is on Choice (with booking button/details for on-platform payment) or external link.";"`GET /api/events/{eventId}` (should provide all details & promotion info, booking type, rsvp counts, micro-social proof data). `POST /api/interests` (for this specific event). `GET /api/interests/event/{eventId}/friends` (to see friends interested). APIs for calendar integration. For native events: `GET /api/events/{eventId}/rsvps`, direct booking APIs (`POST /api/events/{eventId}/book`).";Yes (Major Overhaul);"Highly engaging event page: All details clear & attractive. Strong social proof (Interests, RSVPs for native events). Easy 'Interest' expression & group sharing. Calendar integration. Displays live event-specific promotions. Clear booking path (on-Choice with direct payment, or external)."
InterestCalendarSyncScreen;User;0%;"**Core Gaps**: UI for calendar authorization (OAuth2). Sync settings UI. Logic to convert Interest to calendar event draft. User confirmation flow.";"Needs: `POST /api/users/calendar/authorize`, `POST /api/users/calendar/create-event`, `GET/PUT /api/users/calendar/settings`.";Yes;"Seamless optional integration for users to add expressed Interests (events, bookings) to their personal calendars."
MyEventsManagementScreen;Producer (Leisure);25%;"**Linked to `MyProducerLeisureProfileScreen`.** \n**Functional:** Basic event listing & creation form UI for *internal* Choice events. \n**Needs Improvement :** UI/UX polish. Robustness of forms. Implement advanced, faceted filtering and sorting options for managed events.\n**To Implement:** Clearly differentiate UI for managing externally listed events (read-only, link to original source) vs. internally created Choice events (full CRUD, direct payment on Choice). For *internally created events*: UI to manage direct booking settings, view direct bookings/attendee lists (with RSVP status), manage ticket inventory/availability, QR code check-in system. UI to create/manage promo codes. Advanced scheduling (recurring). Duplication. Publish/unpublish. Detailed stats per event (distinguishing internal/external data sources, including micro-social proof data). Integration with timed promotions.";"For *internally managed Choice events*: Primary CRUD `POST /api/events`, `PUT /api/events/{eventId}`, `DELETE /api/events/{eventId}` (producer-scoped). `GET /api/leisureProducers/{producerId}/events` (for listing all events, distinguishing source, advanced filtering). **Needs for internal events:** APIs for managing booking settings (e.g., `PUT /api/events/{eventId}/booking-config`), viewing/managing direct bookings (e.g., `GET /api/events/{eventId}/direct-bookings`, `POST /api/events/{eventId}/bookings/{bookingId}/status`, `GET /api/events/{eventId}/attendees`), managing ticket inventory (`PUT /api/events/{eventId}/inventory`), QR check-in (`POST /api/events/{eventId}/check-in`). APIs for promo code management (`POST/GET/PUT/DELETE /api/events/{eventId}/promocodes`). API for event-specific stats (`GET /api/events/{eventId}/stats` - needs to handle internal vs. external distinction and provide micro-social proof data).";Yes;"Powerful dashboard for Leisure Producers to: 1. View their externally listed events (linking out if necessary). 2. Perform full CRUD, scheduling, and promotion management for events created *directly on Choice*. 3. Set up and manage direct booking/ticketing (with on-platform payment) and inventory for their native Choice events, including attendee management (RSVPs, check-in) and promo codes. Comprehensive performance analytics differentiating internal vs. external event data (with social proof insights). Advanced filtering/sorting of events."
NotificationSettingsScreen;User, Producer;5%;"**To Implement:** UI for users/producers to manage granular notification preferences (push, email) for various event types (new followers, new Choices on interested items, direct messages, booking confirmations for native events, group updates, achievement unlocks etc.). Backend to store and respect these preferences.";"Needs: `GET /api/users/notification-settings`, `PUT /api/users/notification-settings`. Backend logic for various notification triggers and delivery.";Yes;"Users and Producers can fully control the notifications they receive, ensuring relevant updates without overload."
InAppNotificationCenterScreen;User, Producer;5%;"**To Implement:** UI to display a chronological list of all received notifications. Ability to mark as read/unread. Deep linking from notification to relevant content (profile, event, message, achievement).";"Needs: `GET /api/notifications/user/{userId}` (with pagination). Backend to store all notifications sent.";Yes;"A central place for users/producers to catch up on all platform activity relevant to them."
UserGroupsScreen;User;5%;"**To Implement:** UI to discover existing public groups (search, browse by category/interest). UI to create new groups (public/private, name, description, interest tags). UI to manage joined groups. Implement advanced, faceted filtering and sorting for group discovery.";"Needs: `GET /api/groups/search` (with filtering/sorting), `POST /api/groups/create`, `GET /api/users/{userId}/groups`. `POST /api/groups/{groupId}/join`, `POST /api/groups/{groupId}/leave`.";Yes;"Users can easily find, join, or create communities around shared interests, with good discovery tools."
GroupDetailScreen;User;5%;"**To Implement:** Display group info, member list. Dedicated feed for group-specific Choices/Interests/Posts (with micro-social proof). UI for members to post/share content within the group. Admin tools for group creators (manage members, edit group info). Implement advanced, faceted filtering and sorting for group feed. Tools for planning a specific outing: suggest places/events, poll members, shareable link for non-app users to RSVP/view details.";"Needs: `GET /api/groups/{groupId}`, `GET /api/groups/{groupId}/feed` (with filtering/sorting, micro-social proof data). `POST /api/groups/{groupId}/post`. APIs for group admin actions. APIs for group polling (`POST /api/groups/{groupId}/poll`), generating shareable invite links (`POST /api/groups/{groupId}/invite-link`).";Yes;"Engaging space for group members to interact, share relevant content, and plan group outings, with good content discovery."
CreateGroupScreen;User;5%;"**To Implement:** Form for group name, description, cover image, privacy settings (public/private), associated interest tags. Backend validation.";"Uses `POST /api/groups/create`.";Yes;"Simple and intuitive group creation process."
MyCollectionsScreen;User;5%;"**To Implement:** UI to create, view, and manage personal and collaborative 'Choice Lists' (e.g., ""Best Vegan Restaurants"") or 'Trip Itineraries'. UI to invite collaborators to lists. Permissions for collaborators (view/edit). Ability to categorize or tag lists for specific 'moments' (e.g., 'For a Date', 'With Parents').";"Needs: CRUD APIs for collections (`POST /api/collections`, `GET /api/users/{userId}/collections`, `GET /api/collections/{collectionId}`, `PUT /api/collections/{collectionId}` - supporting moment tags). APIs for managing collaborators (`POST /api/collections/{collectionId}/collaborators`).";Yes;"Users can curate and share personalized or group-curated lists of Choices and plans, categorized for different contexts."
SharedListDetailScreen;User;5%;"**To Implement:** Display items in a shared list/itinerary. UI for collaborators to add/remove/comment on items. View collaborators.";"Uses `GET /api/collections/{collectionId}` and APIs for item manipulation within a collection.";Yes;"Seamless collaboration on shared lists and itineraries."
ItineraryPlannerScreen;User;0%;"**To Implement:** UI for user to input criteria for itinerary generation (destination, dates, interests, budget, pace). Integration with Copilot AI for suggestions. Ability to use saved Choices/Interests/Collections as input. **Key Features:** Ability to favorite/select specific AI suggestions *during* the planning phase to guide generation. Constraints input: max end time, total budget caps. Direct integration for sharing draft or ideas to User Groups for collaborative input *before* final generation. Display ""AI used from X data"" for transparency.";"Needs: `POST /api/ai/generate-itinerary` (complex backend integrating with user data, producer data, external mapping/info services, and AI; needs to accept constraints like max_end_time, total_budget, pre-selected favorite suggestions). `GET /api/users/{userId}/itineraries`.";Yes (Major Overhaul);"AI-powered, personalized itinerary generation that is collaborative, constraint-aware, and makes travel/activity planning effortless, fun, and shareable. Transparent about AI data usage."
GeneratedItineraryScreen;User;0%;"**To Implement:** Display AI-generated itinerary (map view, list view of activities/places). Ability to customize/edit the itinerary. Option to save, share, or convert to a collaborative list/collection. Links to book/reserve (where applicable, esp. for native Choice events or through partners). Easy sharing of the generated itinerary to User Groups or specific friends.";"Uses `GET /api/itineraries/{itineraryId}`, `PUT /api/itineraries/{itineraryId}`.";Yes (Major Overhaul);"Interactive and actionable display of AI-generated travel/activity plans, easily shareable with groups."
UserAchievementsScreen;User;5%;"**To Implement:** UI to display user's earned points, badges, and potentially leaderboard ranking. Visual representation of progress towards next achievements. Explanation of how to earn different badges/points.";"Needs: `GET /api/users/{userId}/achievements`, `GET /api/leaderboard`. Backend logic for defining achievements, tracking progress, and awarding points/badges.";Yes;"Engaging display of user's progress and status within the Choice community, encouraging further interaction."
EventSuccessForecasterScreen;Producer (Leisure);0%;"**To Implement:** AI-driven dashboard for strategic event planning: Demand prediction (user Interest, attendance range based on historical Choice data & trends). Optimal timing & pricing suggestions (based on demand, anonymized competitor data). Target audience insights (demographics, key interests for event type). ""What-If"" scenario planning for discounts/timing. Promotion channel effectiveness analysis (for internal Choice promotions). Post-event analysis & recommendations (attendee demographics, booking sources, promo effectiveness, AI recs for future events). Display ""AI used from X data"" for transparency. **Access to full features/depth of analysis may be tiered (Premium).**";"Needs: New complex AI APIs (`POST /api/ai/leisure/forecast-demand`, `POST /api/ai/leisure/optimize-event-parameters`). Enhanced `GET /api/events/{eventId}/stats` for richer post-event data. Access to aggregated user Interest data, anonymized competitor event data, platform trend data. Backend logic for tiered feature access.";Yes (Major Overhaul);"Leisure producers gain a proactive, data-driven event planning tool. AI provides actionable intelligence to forecast demand, optimize event parameters, understand target audiences, and analyze performance, ultimately reducing risk and increasing event success. Advanced insights and forecasting capabilities potentially reserved for premium subscribers. Transparent AI data usage."
MyChoiceCalendarScreen;User;5%;"**To Implement:** Unified calendar/agenda view of all user's upcoming booked/chosen activities (native Choice events, manually added external Choices with dates). Visual indication of source. Integration with `InterestCalendarSyncScreen`. Optional AI-powered suggestions for activities before/after scheduled items (with ""AI used from X data"" transparency). Automatic reminders. Social context: see if friends are also attending (for shared events).";"Needs: `GET /api/users/{userId}/agenda` (aggregates native bookings, Choices with dates). `POST /api/reminders/setup`. Integration with AI for contextual suggestions (`POST /api/ai/suggest-around-activity`).";Yes;"Centralized hub for the user's social life and planned activities, with smart reminders and contextual recommendations."