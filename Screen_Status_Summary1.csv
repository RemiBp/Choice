"Screen Name";"Interface (User/ProducerX)";"Current Status (%)";"Issues / Gaps";"Linked Backend/API";"UI/UX Review Needed?";"Expected Outcome"
"LanguageSelectionScreen";"First Launch (All)";"20%";"**Functional (✅):** Basic language selection UI.\n**Needs Improvement (⚠️):** Ensure preference persistence if user registers immediately after selection for the initially selected language.\n**To Implement (❌):** Full implementation and operationalization of English and Spanish language options throughout the entire application. All text, labels, and dynamic content need to be translatable and correctly displayed based on user selection. Ensure `easy_localization` is fully integrated and functional for all screens and components for these languages.";"`SharedPreferences` (Local), Optional: `PUT /api/users/preferences`. Requires full setup of `easy_localization` with EN & ES translation files.";"Yes (for new languages)";"Seamless and robust language selection (including English and Spanish) persistent across user sessions/profiles and operational throughout the entire application."
"LandingPage";"Unauthenticated";"25%";"**Functional (✅):** Basic Producer Search (`/api/unified/search`) if data exists. Basic Direct Producer Login (`/api/auth/login-with-id`) if account is already claimed and credentials known.\n**Needs Improvement (⚠️):** UI guidance for producer claim vs. recover flow. Clearer visual distinction between user/producer paths. Frontend route for `/recover` exists but lacks robust UI for claim submission.\n**To Implement (❌):** Display actual Choice App logo. **Producer Account Recovery/Claiming**: The current 'Recover Account' is NOT a functional claiming process. Needs: Full backend logic for **producer profile claiming** (`POST /api/auth/claim-producer-profile`) including robust justification/proof submission (UI for file upload, text fields on `/recover`), verification workflow (admin review, automated checks), and account linking. Suspension mechanism for failed/fraudulent claims. **Streamlined Producer Account Creation**: A 2-3 click process initiated from Landing Page to efficiently gather all necessary information for various producer types and create their accounts. Dynamic content display (trending Choices/Interests).";"`GET /api/unified/search` (functional for basic search), `POST /api/auth/login-with-id` (functional for already claimed). Needs: `POST /api/auth/claim-producer-profile` (new backend logic, file handling, verification state machine for claims, suspension logic). Needs new or enhanced `POST /api/auth/register-producer` to support streamlined creation with all necessary fields for different producer types, potentially new intermediary APIs. Backend review process for claims.";"Yes";"Engaging Landing Page with official Choice logo. Clear, distinct, and fully functional onboarding paths: 1. Users (login/create). 2. Producers: Streamlined 2-3 click account creation. 3. Producers: Secure and verifiable profile claiming process for existing unmanaged listings, requiring proof. Dynamic content for engagement."
"LoginUserPage";"User";"70%";"**Functional (✅):** Basic email/password login.\n**Needs Improvement (⚠️):** UI/UX polish.\n**To Implement (❌):** Google Sign-In (frontend & backend OAuth). Fetching Google profile info & contacts (with consent) to suggest friends/invites. Feature to add 'Proches' (close friends/family) via phone contacts (UI for permission, contact list access, backend processing for invites/connections). 'Remember me' option.";"Basic: `POST /api/auth/login`. Needs: Backend for Google OAuth (`/api/auth/google`, `/api/auth/google/callback`). APIs for contact processing & friend suggestions (`POST /api/users/suggest-friends-from-contacts`).";"Yes";"Secure, reliable login with Email/Password AND Google Sign-In. Seamless onboarding via Google contacts & phone contacts for finding/adding 'Proches'."
"RegisterUserPage";"User";"85%";"Standard registration. Add social signup options? Profile completion prompts?";"`POST /api/auth/register` or `POST /api/newuser/register`";"No";"Simple, secure user account creation, potentially with social options."
"RegisterRestaurantProducerPage";"Producer (Restaurant)";"60%";"Robust validation needed (incl. duplicate checks). Needs clear link to claiming existing profile first. UI for detailed initial setup (menu structure?).";"`POST /api/auth/register-producer` (type: RestaurantProducer) or `POST /api/producers/register`. Needs check against existing producers.";"Yes";"Comprehensive, validated registration *after* checking for existing claimable profiles. Guidance for initial profile setup."
"RegisterLeisureProducerPage";"Producer (Leisure)";"60%";"Robust validation needed. Link to claiming existing profile first. UI for initial event/activity type setup?";"`POST /api/auth/register-producer` (type: LeisureProducer) or `POST /api/leisure-producers/register`. Needs check against existing producers.";"Yes";"Comprehensive, validated registration *after* checking for existing claimable profiles. Guidance for initial profile setup."
"RegisterWellnessProducerPage";"Producer (Wellness)";"60%";"Robust validation needed. Link to claiming existing profile first. Needs UI to define initial `criteria_ratings` upon registration.";"`POST /api/auth/register-producer` (type: WellnessProducer) or `POST /api/wellness/register`. Needs check against existing producers. Needs handling for initial criteria.";"Yes";"Comprehensive, validated registration *after* checking for existing claimable profiles, including mandatory initial rating criteria setup."
"RecoverProducerPage";"Producer";"30%";"**Core Gap**: Implementation of profile **claiming** logic. Needs UI for proof upload (securely). Backend needs verification workflow (manual admin or automated). Clear UI distinction between password recovery and profile claiming needed.";"Needs: `POST /api/auth/claim-producer-profile` (backend logic, file handling, verification state machine). Existing `/recover-producer` likely only handles password reset.";"Yes";"Secure, verifiable, and distinct processes for 1) claiming existing profiles (with proof) and 2) recovering access to already managed accounts."
"ResetPasswordScreen";"User/Producer";"70%";"**Functional (✅):** Basic password reset mechanism assumed.\n**Needs Improvement (⚠️):** UI/UX polish for clarity, error handling, and security feedback.\n**To Implement (❌):** Full end-to-end testing and hardening of the token generation, email delivery, and password update process to ensure robustness for all user types and edge cases.";"`POST /api/auth/reset-password/{token}` (ensure this API is fully robust and secure).";"Yes";"Fully functional, secure, and user-friendly password reset process for all account types, with clear instructions and error handling."
"FeedScreen";"User, Guest";"15%";"**Functional (✅):** Basic post display structure (if `/api/posts/feed` returns data).\n**Needs Improvement (⚠️):** Major performance optimization for infinite scroll & large datasets. UI for all media types (ensure actual video for reels). Consistent profile linking. Robustness of basic like/comment for standard posts.\n**To Implement (❌):** **Core Feed Algorithm** (backend: complex blending of friend Choices-as-Posts, friend Interests for entities with social context e.g., 'Marie is interested in Event X (target of producer post), check it out!'), producer posts, AI recommendations). **Distinct Visuals**: Different card designs for User Choices, User Posts, Producer Posts, Interests. **Full Interaction Suite**: Like/Comment on all content types (Choices, Posts from producers), including liking individual comments. **Contextual Interest Button**: On Producer posts (for specific events/places/items mentioned), linking Interest to specific entity. Users express Interest in an ENTITY, not the post itself. **Interest Group Sharing**: UI to select groups for sharing an Interest; Feed to filter based on these groups. **Emoji Support**: Full emoji rendering & input. **Detailed Like View**: UI to see who liked posts/Choices. **UI Cleanup**: Removal of non-functional/placeholder buttons. `+` button at bottom right seems redundant if main nav FAB exists for 'New Choice'.";"Needs: New **Feed API** (`/api/feed/{userId}` for complex blending, AI, group filters, entity-linked Interests, detailed like counts). **Extended Interaction API** (`POST /api/interactions`) for all actions (like post, like comment, like choice, share choice, etc.) on all content types. `POST /api/interests` (contextual, specific entity linking, group sharing metadata). Robust media handling (CDN/API). `GET /api/choices/user/{userId}/network`, `GET /api/interests/user/{userId}/network` (with group support). API to view likers.";"Yes (Major Overhaul)";"Instagram-level Feed: Lightning-fast, visually stunning, hyper-personalized. Algorithmically blends network Choices (as rich posts), network Interests for entities (with social cues & group filtering), producer content & AI recs. Full, intuitive interaction suite on all items. Handles all media seamlessly. Zero redundant UI elements."
"MapRestaurantScreen";"User, Guest";"25%";"**Functional (✅):** Basic map display, marker placement if data is fetched.\n**Needs Improvement (⚠️):** UI/UX consistency with other map screens (transitions, marker/popup design, filter appearance). Performance with many data points.\n**To Implement (❌):** **Stylized Markers & Rich Pop-ups**: Show key place image, short description, aggregated Choice rating, network Interest count (e.g., '3 friends interested'), stylized indication of recent network Choices. **Comprehensive Filtering**: By cuisine, price, rating, specific menu items (if feasible), friend Choices/Interests for restaurants. **Dynamic Filter Coloring**: Map markers/areas change appearance based on selected filters or density of matching Choices/Interests. **Viewport-Based Search**: Results update automatically as user moves the map. Correct deep-linking to `ProducerScreen`.";"Needs: Enhanced map endpoint (`/api/producers/map-choices-interests` supporting rich data for popups, viewport queries, all filters). `POST /api/interests` integration. Backend logic for aggregating network Choices/Interests per location.";"Yes (Major Overhaul)";"Unified Map UI: Consistent, beautiful, highly performant map for restaurants. Rich, interactive pop-ups. Powerful, dynamic filtering (incl. social signals & live viewport search). Seamless navigation to profiles."
"MapLeisureScreen";"User, Guest";"25%";"**Functional (✅):** Basic map display.\n**Needs Improvement (⚠️):** UI/UX consistency, marker/popup design, performance.\n**To Implement (❌):** **Stylized Markers & Rich Pop-ups**: Event/venue image, description, Choice rating, network Interest count, recent network Choices. **Comprehensive Filtering**: By activity type, event category, date ranges, friend Choices/Interests. **Dynamic Filter Coloring**. **Viewport-Based Search**. Correct deep-linking to `ProducerLeisureScreen`/`EventLeisureScreen`.";"Needs: Enhanced map endpoint (`/api/leisure/map-choices-interests` supporting rich data, viewport queries, all filters). `POST /api/interests` integration. Backend logic for network Choice/Interest aggregation.";"Yes (Major Overhaul)";"Unified Map UI: Consistent, beautiful, highly performant map for leisure. Rich, interactive pop-ups. Powerful, dynamic filtering (incl. social signals & live viewport search). Seamless navigation to profiles/events."
"MapWellnessScreen";"User, Guest";"25%";"**Functional (✅):** Basic map display.\n**Needs Improvement (⚠️):** UI/UX consistency, marker/popup design, performance.\n**To Implement (❌):** **Stylized Markers & Rich Pop-ups**: Center image, description, Choice rating (based on its criteria), network Interest count, recent network Choices. **Comprehensive Filtering**: By service type, specific wellness criteria ratings, friend Choices/Interests. **Dynamic Filter Coloring**. **Viewport-Based Search**. Correct deep-linking to `WellnessProducerScreen`.";"Needs: Enhanced map endpoint (`/api/wellness/map-choices-interests` supporting rich data, viewport queries, all filters). `POST /api/interests` integration. Backend logic for network Choice/Interest aggregation.";"Yes (Major Overhaul)";"Unified Map UI: Consistent, beautiful, highly performant map for wellness. Rich, interactive pop-ups. Powerful, dynamic filtering (incl. social signals & live viewport search). Seamless navigation to profiles."
"MapFriendsScreen";"User";"25%";"**Functional (✅):** Basic display of friend locations (if shared and data is available).\n**Needs Improvement (⚠️):** Accuracy/privacy controls refinement & clear UI. Deep-linking to `ProfileScreen`. Performance/battery impact for real-time aspects.\n**To Implement (❌):** **Advanced Friend Filtering**: By their recent Choices (e.g., 'Friends who Chose Italian Food'), by their Interests (e.g., 'Friends interested in Concerts'), by user-defined friend groups. **Choice/Interest Density Overlay**: Option to color-code map areas based on concentration of filtered friends' Choices/Interests. **Search Any User & View Their Activity**: UI to search for *any* public Choice user. On selection, display their publicly shared ""Choices"" and ""Interests"" as stylized, distinct markers on the map (respecting privacy). Clicking markers leads to Choice/Interest detail or related entity. Deep linking to selected user's `ProfileScreen` from map/search.";"`GET /api/friends/map-data/{userId}` (needs major enhancement for advanced filtering and fetching friend Choice/Interest geo-data). Needs: APIs for user search on map (`GET /api/users/search-map-activity?query=X`), APIs to fetch specific user's public geo-tagged Choices/Interests (`GET /api/users/{id}/map-activity`). Friend group management APIs if that feature is built.";"Yes (Major Overhaul)";"Privacy-centric map of friends' locations. Powerful social discovery by filtering friends by their Choices/Interests, with visual density overlays. Ability to search any public user and see their shared map activity (Choices/Interests) in a stylized way."
"ProducerSearchPage";"User, Guest";"15%";"**Functional (✅):** Basic search input UI, placeholder for trending sections.\n**Needs Improvement (⚠️):** Rename to 'Explore' or 'Discovery' Page. UI/UX to be harmonized with overall app style. Existing trending sections show static/mock data.\n**To Implement (❌):** **Core Backend Overhaul for Dynamic Content:** \n1. **Trending Algorithm**: Implement dynamic scoring (`views*0.5 + clicks*1 + saves*2 + shares*3 + presenceNearby*2 - timeDecayFactor`). Factor in geolocated activity peaks. Requires comprehensive `activity_logs` (userId, action, placeId, lat, lng, timestamp, `last_interaction_timestamp`). \n2. **Geo-Indexing & Clustering**: Backend to associate places with lat/lng, city, and dynamic `cluster_id` (500m, 1km, 2km zones) for localized trend grouping ('autour de moi', by neighborhood). \n3. **Enhanced User Activity Tracking**: Extend `AppDataSenderService` for `screen_view`, `map_view`, `event_click`, `restaurant_detail_loaded`, `cta_click`. Batch process logs frequently (e.g., every 15 mins) to update trends. \n4. **Real-time Data Connection**: Frontend consumes frequently updated trending/nearby scores. \n5. **'Around Me' Functionality**: Sections like 'Le plus populaire autour de vous' driven by actual user location & new backend logic. \n6. **AI Cross-Recommendations (Optional)**: Lightweight collaborative filtering. \n7. **Advanced Filtering/Sorting**: For search results, based on new backend capabilities. \n8. **Direct 'Add Interest'**: UI/backend from search/explore results.";"Existing: `GET /api/unified/trending-public`, `GET /api/unified/nearby-public` (both need complete overhaul to be dynamic & personalized). `GET /api/unified/search` (needs enhanced filtering/sorting). \nNeeds: New/Overhauled APIs for dynamic trending (`/api/explore/trending?lat=X&lng=Y&clusterId=Z`), nearby (`/api/explore/nearby?lat=X&lng=Y`), and clustered trends. `POST /api/activity-log` (comprehensive). `POST /api/interests`. Optional: `GET /api/ai/recommendations/explore`.";"Yes (Major Overhaul)";"Dynamic 'Explore/Discovery' Screen (renamed): Twitter-like trending for local experiences, hyper-localized 'around me' sections powered by real-time activity, geo-clustering, and dynamic scoring. Advanced search filters. Seamless 'Add Interest' actions."
"CopilotScreen";"User";"5%";"**Functional (✅):** (Likely placeholder UI shell only).\n**Needs Improvement (⚠️):** **UI/UX Overhaul**: Complete redesign for natural conversational flow, clear display of diverse results (stylized lists, cards, map snippets, user profile cards). Loading/error states. \n**To Implement (❌):** **Ultra-Powerful AI Backend**: \n1. **Versatile Query Handling**: Understand complex natural language (e.g., 'friends' Choices/Interests for X', 'discounted noodle restaurants near me tonight'). \n2. **Data Source Integration**: AI must query all relevant DB collections (`Choices`, `Interests`, `Users`, `Producers`, `Events`, `Offers`, `locationHistory`). \n3. **Entity Recognition & Actionable Results**: Identify users, places, events. Results must be interactive (deep-linking to profiles, place details, event details). \n4. **Voice Input (Optional)**. \n5. **External AI Model Dependency**: Acknowledge reliance on models like GPT (OpenAI API). Address API costs, rate limits, data privacy, latency. Need for an abstraction layer for AI services. Backend: `POST /api/ai/copilot` needs to orchestrate calls to external AI, internal DB queries, and result formatting. User feedback mechanism for AI suggestions.\";\"Needs: Heavily enhanced `POST /api/ai/copilot` (or new `/api/ai/user-assistant`) for complex NLP, querying all DBs, interfacing with external AI (e.g., OpenAI), formatting rich results. `GET /api/ai/recommendations/{userId}`. `POST /api/ai/copilot/feedback`. Robust error handling and consideration for API costs/limits of external AI services.\";\"Yes (Major Overhaul)\";\"Highly intelligent & versatile AI assistant: Understands complex conversational queries (text & optional voice). Seamlessly queries all internal data & external AI. Returns rich, stylized, and actionable results (places, events, user profiles) with clear deep-linking. Transparent about potential AI dependencies/costs.\""
"MyProfileScreen";"User";"30%";"**Functional (✅):** Basic profile info display (`_fetchUserProfile` from `myprofile_screen.dart` exists). Rudimentary post display. Basic Tab structure.\n**Needs Improvement (⚠️):** **UI/UX Overhaul for Tabs**: Current Interest/Choice/Post displays are placeholders or basic. Needs visually appealing, Instagram-like card designs for each content type within tabs. Ensure smooth scrolling and loading. Clear indication this is the **logged-in user's** management screen. `EditProfileScreen` navigation exists - ensure all fields are manageable & UI is polished.\n**To Implement (❌):** **'Coup de Coeur' (Favorite Choice of the Month)**: Full backend (`POST /api/users/{userId}/favorite-choice`) and frontend logic (UI for selection dialog `_showFavoriteChoiceDialog`, prominent stylized display on profile, 'View/Change Favorite Choice' button). **Manage Own Content**: Full CRUD for own Choices & Interests (Edit/Delete UI, link to backend APIs). **'Coups de coeur' (General Bookmarks/Favorites)**: UI to add/remove *any* content (Producers, Events, specific Choices, Interests, Posts, Menu Items) as a favorite/bookmark. Dedicated, beautifully designed section/tab in profile to view & manage these. **Full Account Management Settings (Instagram-Level)**: Comprehensive and functional sections for: Privacy (profile, post, choice visibility), Notifications (push & email for all event types), Blocked Users (view/unblock), Activity Log (own recent interactions), Security (password change, 2FA - future), Linked Accounts.";"Existing: `GET /api/users/{userId}`, `PUT /api/users/profile/update`, `GET/PUT /api/preferences`, `POST /api/users/{userId}/favorite-choice` (backend likely exists). Needs: `DELETE /api/choices/{id}`, `PUT /api/choices/{id}`. `DELETE /api/interests/{id}`, `PUT /api/interests/{id}`. New Bookmark API (`POST/DELETE /api/bookmarks`, `GET /api/users/{userId}/bookmarks`). APIs to fetch own Choices/Interests. Backend for all missing settings sections.";"Yes (Major Overhaul)";"Instagram-level **logged-in user profile**: Polished UI. Fully functional 'Favorite Choice of the Month'. Beautifully presented tabs for user's own Interests, Choices, Posts. Full CRUD for own content. Comprehensive 'Bookmarks/Favorites' system. Robust account management."
"ProfileScreen";"User, Guest";"30%";"**Functional (✅):** Basic public profile display structure (name, bio, photo from `profile_screen.dart`).\n**Needs Improvement (⚠️):** UI/UX to align with `MyProfileScreen`'s polish but for public view, ensuring clear distinction. Robust Follow/Unfollow button states & actions. Friend request state handling (Pending, Accept/Decline UI if applicable here or via notifications).\n**To Implement (❌):** **Content Tabs**: Display of target user's *public* Choices, *public* Interests, and *public* Posts in separate, styled tabs. This requires backend to respect privacy settings of the target user when fetching this data.";"`GET /api/users/{userId}/public` (needs significant extension to include public Choices, Interests, Posts, respecting privacy settings of target user). `POST /api/friends/request`, `POST /api/users/follow` (needs robust state management for follow/friendship status).";"Yes";"Clear, informative, and visually appealing public view of other users, showcasing their shareable Choices, Interests, and Posts (respecting privacy). Smooth follow/friending actions with clear status visibility."
"MessagingScreen";"User, Producer";"15%";"**Functional (✅):** Basic 1-to-1 text messaging framework (APIs likely exist).\n**Needs Improvement (⚠️):** Current UI/UX is likely very basic. Performance with many messages/conversations. Reliability of real-time updates (WebSockets).\n**To Implement (❌):** **Full Instagram DM Feature Parity (User & Producer Contexts)**: Group chats (create, manage, add/remove users). @Mentions in chats (UI suggestions, backend parsing & notifications). Initiate Video/Audio calls directly from chat. Read receipts. Typing indicators. Robust message search within conversations & across all chats. Seamless rich media handling (images, videos, GIFs - upload, display, storage). **Producer Specific Tools**: UI & Backend for Quick Replies & Canned Responses. Ability to easily link/share producer's own services/events/offers directly within a chat. Backend APIs for all new features.";"Existing: `GET /api/conversations`, `GET /api/messages`, `POST /api/conversations/send`, WebSockets. Needs: Group Chat APIs (`POST /api/conversations/group`, `PUT .../group/{id}/members`, etc.). @Mention backend logic. Call initiation logic from chat. Enhanced WebSocket events for read receipts & typing. Message Search API (`GET /api/messages/search?query=X`). Media Upload API (`POST /api/media/message`). Producer Quick Reply/Canned Response CRUD APIs (`GET/POST/PUT/DELETE /api/producers/message-templates`).";"Yes (Major Overhaul)";"Instagram DM equivalent for Users. For Producers: all user features + powerful CRM-like tools (quick/canned replies, direct sharing of services/offers) for efficient client communication. Fully featured (groups, calls, mentions, GIFs, media, search, read receipts)."
"VideoCallScreen";"User";"25%";"WebRTC implementation needed. Call quality management. Basic UI exists, but needs refinement for reliability. Screen sharing/group calls are future considerations.";"WebSockets (Signaling), `POST /api/calls/initiate`, `/accept`, `/end`. Needs robust WebRTC backend/signaling.";"Yes";"Stable, high-quality 1-to-1 video/audio calls as baseline."
"ChoiceCreationScreen";"User";"30%";"**Functional (✅):** Type selection. Location search/selection. Location verification (`POST /api/choices/verify`). Basic comment input. Core Choice data submission (`POST /api/choices`). Fetching producer menu/criteria.\n**Needs Improvement (⚠️):** UI for multi-facet rating. 'Create Post' flow. Verification feedback.\n**To Implement (❌):** Photo/video upload. **'With Whom' Feature**: UI to tag/indicate companions (friend list, free text?). Backend to store this. Privacy settings for Choice/Post. Draft saving. AI menu augmentation display. **Interest Creation**: Define separate flow/UI for Interests (pre-experience). ";"Uses existing APIs. Missing: Media API, Tagging/Companion API (`PUT /api/choices/{id}/companions`), Privacy API, Draft API. Payload extension for `POST /api/choices` for 'companions'. Separate `POST /api/interests` flow/UI.";"Yes";"**Choices (Post-Experience):** Seamless creation with media, 'with whom' tagging, privacy, drafts. **Interests (Pre-Experience):** Separate, equally intuitive flow for creating Interests."
"ProducerFeedScreen";"All Producers";"10%";"**Functional (✅):** Placeholder for feed display.\n**Needs Improvement (⚠️):** **UI/UX Overhaul**: Aim for Instagram-level visual appeal & interaction, tailored for producer needs. Ensure full media support (view large, all formats) & consistent profile linking from all items. Producers CANNOT emit Interests (this is a user action on entities).\n**To Implement (❌):** **Advanced Feed Algorithm**: Backend logic for content mix: 1. Interactions on *own* profile/posts/events/services (new followers, Choices, comments, Interests in their offerings). 2. Posts from users/producers they follow (if this feature is enabled for producers). 3. *Anonymized & Aggregated* nearby competitor activity/trends (complex, requires careful ethical/data consideration, e.g., ""Italian restaurants near you are popular for X dish""). 4. Trending local ""Interests"" for their business category/offerings. **Intelligence**: Algorithm learns from producer interactions to refine relevance. **Interaction Suite**: Producers can Like/Comment on user Choices/posts about their establishment. Can Share UGC (with permission). **Filtering/Sorting**: By date, interaction type, sentiment (AI). Performance. **No Producer Promotions Displayed *Here***: This feed is for *their* insights; promotions appear in *user* feeds/profiles. May show analytics on *their own* promo performance.";"Needs: MASSIVELY Overhauled `GET /api/producer-feed/{producerId}` (complex data aggregation, AI sentiment, competitor/local trend data feeds). `POST /api/interactions` (for producer likes/comments on user content about them). `GET /api/local-trends?area=X&category=Y&producerType=Z` (new, for local/competitor insights). Robust APIs for fetching and displaying diverse content types (Choices, user posts, etc.) with all media.";"Yes (Major Overhaul)";"Instagram-level professional feed for Producers: Highly relevant, actionable insights from their audience, local market, and (potentially, carefully, and anonymized) competitor context. Full interaction suite for engaging with user content about them. Learns producer preferences. No "Interest" creation capability for producers themselves."
"HeatmapScreen";"All Producers";"5%";"**Functional (✅):** Basic map display placeholder.\n**Needs Improvement (⚠️):** **UI/UX Uniformity & Enhancement**: Consistent, intuitive interface for all producer types, tailored visualizations (e.g., restaurant heat based on Choices/Interests vs. event heat based on current check-ins/live Interest for future events).\n**To Implement (❌):** **"Attract On-Live" Functionality**: \n1. **Restaurant/Wellness**: UI for producers to define real-time, hyper-local, time-sensitive offers (e.g., "End of service: 30% off X for users in 200m, next 1 hour"). Map reflects these active offer zones. Backend manages dynamic offers (creation, timing, geo-fencing, redemption). User app detects/notifies for these. \n2. **Leisure/Events (Re-think)**: Heatmap might show: current event capacity/last-minute ticket availability (for ongoing events if data available), real-time ""Interest"" hotspots for *future* events to guide promo, user check-in density *during* events (for crowd flow/popular zones, requires check-in feature). \n**Data Visualization**: Clear, actionable display of user density, Choice hotspots, Interest clusters, and active/producer-defined offer zones. **Performance**: Handle potentially large real-time data for display.";"Needs: Highly dynamic `GET /api/heatmap/{producerId}` (real-time anonymized user activity, producer-defined offer zones, historical trends, type-specific data for leisure/events). `POST /api/producers/dynamic-offer` (for restaurant/wellness live offers). User-side `GET /api/live-offers?lat=X&lon=Y&userInterests=Z`. For Leisure/Events: New backend endpoints for real-time event attendance (if check-ins exist) or current Interest levels for specific event geo-locations/times.";"Yes (Major Overhaul)";"Powerful analytical tool (historical data) AND groundbreaking real-time on-premise engagement system. Restaurants/Wellness can launch instant, localized offers via map. Leisure/Events can visualize live event interest/attendance and adapt. UI must be intuitive for each producer type to define and leverage these features."
"ProducerDashboardIaPage";"All Producers";"10%";"**Functional (✅):** Basic UI shell. Route `POST /api/ai/producer-query` exists in `ai.js` for interactive queries.\n**Needs Improvement (⚠️):** **UI/UX Overhaul**: For complex query input & rich, actionable result display (comparative performance charts, market positioning visuals, optimization suggestions). Integrate data from all sources for AI.\n**To Implement (❌):** **"Surpuissant" AI Backend**: Models for: 1. Comparative performance analysis (vs anonymized local competitors on similar offerings, based on public Choice data). 2. Menu/service pricing optimization suggestions. 3. Deep customer feedback pattern analysis from Choices/comments. 4. Operational improvement suggestions. **Memory/Context**: AI remembers previous interactions in-session. **Stylized, Clickable Outputs**: Results link to relevant profiles/places for comparison/action. Ensure `ai.js` routes (`/insights/producer`, `/recommendations`, `/producer-insights`) are fully functional, providing deep data and not just surface-level recommendations. **External AI Model Dependency**: Manage GPT-like model usage (cost, latency, data privacy, abstraction).";"Primary: `POST /api/ai/producer-query` (from `ai.js` - needs to be extremely robust, capable of complex data aggregation, comparative analytics, advanced external AI interfacing). Supporting: `GET /api/ai/insights/producer/:producerId`, `GET /api/ai/:producerType/:producerId/recommendations`, `GET /api/ai/producer-insights/:producerId` (all from `ai.js` - ensure deep, actionable data). `GET /api/stats/producer/{producerId}` for raw data. Extensive data pipelines for AI models from all relevant internal & external data sources.";"Yes (Major Overhaul)";"Truly ""surpuissant"" AI co-pilot for producers: Deep, actionable advice with memory & context. Comparative analytics. Optimizes pricing, promos, operations based on comprehensive data (own, competitor, market). Results are rich, interactive, and clearly link to sources/actions."
"GrowthAndReachScreen";"All Producers";"5%";"**Functional (✅):** Placeholder screen.\n**Needs Improvement (⚠️):** Basic UI structure. Needs clear delineation of Free vs. Paid features.\n**To Implement (❌):** **Subscription Tier Management**: Full UI/backend (selection, Stripe/Paypal via `Subscription.js` model, feature access control, lifecycle). **Define Tiered Features**: \n* **Free**: Basic profile views, follower count, total Choices/Interests. \n* **Starter (Paid)**: Detailed analytics (demographics, Choice rating trends), some AI tips, basic competitor comparison (anonymized). \n* **Pro (Paid)**: Advanced analytics (Interest-to-Choice conversion funnels, promo effectiveness), detailed heatmap, advanced AI strategic recs. \n* **Legend (Paid)**: All features, AI automated marketing post suggestions/generation, max visibility. \n**Connect to REAL Data**: Display meaningful metrics (profile views, follower growth, Choice/Interest conversions from their actions, promo redemption). UI for complex metric comparison/visualization.";"Needs: `POST /api/subscriptions/subscribe`, `GET /api/subscriptions/status`, `PUT /api/subscriptions/change-tier`. Payment Gateway Webhook integration (`/stripe-webhooks`). `Subscription.js` model is central. `GET /api/growth-analytics/{producerId}`, `GET /api/stats/summary/{producerId}` (must be tiered). Analytics on promo redemption (`GET /api/offers/{id}/stats`). Backend logic for feature gating by tier.";"Yes (Major Overhaul)";"Functional subscription system clearly unlocking valuable tiered features. Dashboard provides clear ROI via real engagement/conversion analytics, justifying subscription costs. Clear distinction between Free and Paid feature sets."
"MyProducerProfileScreen";"RestaurantProducer";"20%";"**Functional (✅):** Basic profile data display (name, address from `Producer.js` via `myproducerprofile_screen.dart`).\n**Needs Improvement (⚠️):** **UI/UX Overhaul**: Needs user-friendly interface for managing complex `structured_data` menu (nested items, categories, modifiers, photos per item). Clear indication this is **logged-in producer's** POWERFUL DASHBOARD. Integration of Post Management.\n**To Implement (❌):** **Stock Availability**: UI toggle/input per menu item & backend (`PUT /api/producers/{id}/menu/{itemId}/availability`). **Special/New Item Flags**: UI toggle & backend. **Timed Promotions & Dynamic Pricing**: UI for producer to set offers (e.g., ""20% off Pizzas 6-8PM"") & backend to store these with start/end times. Public `ProducerScreen` & menu data must reflect these live price changes. UI to define specific dishes/offers as targetable by user ""Interests"". **AI-Powered Promo Optimization (Premium)**: Suggestions for optimal promo timing/discounts. AI-drafted promo posts. Option for AI-automated targeted posts for new offers/events (tier-dependent). **Integrated Performance Stats**: Contextual display of Choice ratings, Interest counts for their specific menu items.";"`GET /api/producers/{producerId}`, `PUT /api/producers/{id}/update` (needs to support timed overrides, rich `structured_data` menu updates, stock/special flags). `Offer.js` model. Needs: `POST /api/producers/{id}/timed-offer`. Menu item availability API. Interest target definition handling. Post CRUD APIs linked to producer. AI APIs: `POST /api/ai/producer-action/suggest-promo`, `POST /api/ai/producer-action/generate-post`. APIs to fetch item-specific stats.";"Yes (Major Overhaul)";"**Logged-in Restaurant Producer's Dashboard:** Easy, comprehensive profile & highly detailed, visually manageable menu. Full control over dynamic timed promotions (item/category specific) that are instantly live on public views. Define 'Interest'-able items. Manage posts. AI-assisted marketing (premium). View contextual performance stats."
"MyProducerLeisureProfileScreen";"LeisureProducer";"15%";"**Functional (✅):** Basic profile data display. `MyEventsManagementScreen` exists (separate screen).\n**Needs Improvement (⚠️):** Clear indication this is **logged-in producer's** DASHBOARD. More seamless UX for event management (deep linking into `MyEventsManagementScreen` with context, or integrating key event creation/quick-edit actions directly). UI/UX Overhaul for main profile, posts, info sections.\n**To Implement (❌):** **Full Event Creation & Management UI *within this profile screen*** (complementing `MyEventsManagementScreen`): Quick add/edit for events. Robust Calendar UI for scheduling/viewing. Booking/Capacity logic UI/backend. **Timed Promotions** for venue access or specific events/activities. UI to define activities/events targetable by ""Interest"". Full post management. **AI-Powered Promo/Event Suggestion (Premium)**. **Integrated Performance Stats** for events/activities.";"`GET /api/leisure-producers/{id}`, `PUT .../update`. Needs: **`POST /api/events` (callable by producer from this screen)**, `PUT /api/events/{eventId}`, `DELETE /api/events/{eventId}`. Calendar UI support. Capacity/booking backend logic. `POST /api/producers/{id}/timed-offer` (for leisure venue/activities). Interest target definition for events/activities. Post CRUD APIs. AI APIs. Event-specific stat APIs.";"Yes (Major Overhaul)";"**Logged-in Leisure Producer's Dashboard:** Manage profile, posts. Full event/activity creation & management (quick actions on profile, full management via linked/integrated screen). Dynamic timed promotions. Define 'Interest'-able offerings. AI-assisted marketing (premium). View contextual performance."
"MyWellnessProducerProfileScreen";"WellnessProducer";"20%";"**Functional (✅):** Basic profile data display.\n**Needs Improvement (⚠️):** UI/backend for **customizing/updating** `criteria_ratings` beyond initial setup. Clear indication this is **logged-in producer\'s** DASHBOARD. UI/UX Overhaul for main sections, services list.\n**To Implement (❌):** Staff/Practitioner profile linkage UI/backend (create/link profiles, assign to services). Booking information fields/integration options for services. **Timed Promotions** for specific services/classes. UI to define services/classes targetable by ""Interest"". Full post management. **AI-Powered Service Bundling/Promo Suggestions (Premium)**. **Integrated Performance Stats** for services.";"`GET /api/wellness/{id}`, `PUT .../update`. Needs: Staff profile linkage API (`POST/PUT /api/wellness/{id}/staff`). API to update `criteria_ratings` (`PUT /api/wellness/{id}/criteria`). Booking handling logic/APIs. `POST /api/producers/{id}/timed-offer` (for wellness services). Interest target definition. Post CRUD APIs. AI APIs. Service-specific stat APIs.";"Yes (Major Overhaul)";"**Logged-in Wellness Producer's Dashboard:** Manage profile, posts, custom rating criteria, services, practitioners. Dynamic timed promotions. Define 'Interest'-able services. AI-assisted marketing (premium). View contextual performance."
"ProducerScreen";"User, Guest, Producer";"40%";"**Functional (✅):** Basic display of producer info (name, address, photo from `producer_screen.dart`). Tab structure for Info, Menu, Posts, Avis.\n**Needs Improvement (⚠️):** **UI/UX Overhaul**: Aim for Instagram x Yelp hybrid style. Info tab should be default & prominent. 'Avis' tab should be replaced/merged into a rich 'Choices' tab (displaying structured Choices about this producer). Menu tab needs better visual display of `structured_data`. Post tab needs refined card display. Performance with large menus/many posts.\n**To Implement (❌):** **Social Stats Display**: Prominent, stylized display of Followers, total ""Interests"" for the place, total ""Choices"" for the place, with network context ('X friends interested/Chose here'). Clickable stats leading to user lists (respecting privacy). **Dynamic Menu Prices & Promotions**: Menu items must reflect active timed promotions set by producer. Clear visual indicators for promotions/discounts. **Map Integration**: Embedded, clickable map snippet showing location, linking to `MapRestaurantScreen`. **'Express Interest' Button & Share with Group**: For the restaurant itself or specific highlighted menu items/offers. Link to `POST /api/interests` and new `POST /api/users/share-interest-with-group`. **Follow/Unfollow Button** (functional & styled).";"`GET /api/producers/{producerId}` (needs to be significantly enhanced to return aggregated social stats, network context for viewer, details of active timed promotions, and fully resolved `structured_data` for menu, and user Choices about this producer). `POST /api/interests`. `POST /api/users/share-interest-with-group` (new). `POST /api/producers/{id}/follow` (if not covered by a general follow API).";"Yes (Major Overhaul)";"Compelling public restaurant profile (Instagram x Yelp hybrid): Prioritizes essential info. Rich, interactive display of menu with live promotions. Clear social proof (Choices, Interests, follower context). Easy Interest expression & sharing with groups. Integrated map view. Follow functionality."
"ProducerLeisureScreen";"User, Guest, Producer";"35%";"**Functional (✅):** Basic display of leisure producer info from `producerLeisure_screen.dart`.\n**Needs Improvement (⚠️):** **UI/UX Overhaul**: Unify with `ProducerScreen` style. Make event listings more engaging. Performance.\n**To Implement (❌):** **Social Stats Display**: Similar to `ProducerScreen` (Followers, Interests for venue, Choices for venue). **Engaging Events Tab**: Visually rich list of upcoming/past events (from `GET /api/events/producer/{producerId}`). Each event clickable to `EventLeisureScreen`. Allow direct ""Interest"" expression on listed events. **Posts Tab**. **Timed Promotions Display** (for venue or specific events). **Map Integration**. **'Express Interest' Button & Share with Group** (for the venue or specific events). **Follow/Unfollow Button**.";"`GET /api/leisureProducers/{producerId}` (needs social stats, active promos, Choices about this venue). `GET /api/events/producer/{producerId}`. `POST /api/interests` (for venue or specific events). `POST /api/users/share-interest-with-group`.";"Yes (Major Overhaul)";"Engaging public leisure profile: Clear, attractive event listings with Interest CTAs. Social proof (Choices/Interests). Live promotions for venue/events. Map view. Unified UI. Follow functionality."
"WellnessProducerScreen";"User, Guest, Producer";"35%";"**Functional (✅):** Basic display of wellness producer info from `wellness_producer_screen.dart`.\n**Needs Improvement (⚠️):** **UI/UX Overhaul**: Unify with `ProducerScreen` style. Make service listings clearer.\n**To Implement (❌):** **Social Stats Display**. **Services Tab**: Clear, attractive listing of services offered (descriptions, durations, prices that reflect timed promotions). Allow ""Interest"" expression on specific services. **Practitioner/Staff Info Section** (if data available). **Posts Tab**. **Timed Promotions Display**. **Map Integration**. **'Express Interest' Button & Share with Group** (for the center or specific services). **Follow/Unfollow Button**.";"`GET /api/wellness/{placeId}` (needs social stats, active promos, detailed service list, Choices about this venue). `POST /api/interests` (for center or specific services). `POST /api/users/share-interest-with-group`.";"Yes (Major Overhaul)";"Informative public wellness profile: Detailed services with live promotions & Interest CTAs. Social proof (Choices/Interests). Map view. Unified UI. Follow functionality."
"EventLeisureScreen";"User, Guest, Producer";"35%";"**Functional (✅):** Basic event detail display from `eventLeisure_screen.dart`.\n**Needs Improvement (⚠️):** **UI/UX Overhaul** for engagement and clarity. Display all relevant fields from `event.js` model (lineup, accessibility, age restriction, language etc.).\n**To Implement (❌):** **Social Proof**: Display number of ""Interests,"" potentially avatars of friends interested. **Prominent 'Express Interest' & Share with Group Button**: For the event. If event is flexible (e.g. recurring), allow suggesting dates/times when sharing Interest with a group. **Add to Calendar** (link to `InterestCalendarSyncScreen` flow or direct calendar event creation). Clear link back to `ProducerLeisureScreen`. **Real-time Promotion Display**: Show event-specific timed promotions.";"`GET /api/events/{eventId}` (should provide all details & promotion info). `POST /api/interests` (for this specific event). `GET /api/interests/event/{eventId}/friends` (to see friends interested). APIs for calendar integration.";"Yes (Major Overhaul)";"Highly engaging event page: All details clear & attractive. Strong social proof. Easy 'Interest' expression & group sharing (with date/time suggestion for flexible events). Calendar integration. Displays live event-specific promotions."
"InterestCalendarSyncScreen";"User";"0%";"**Core Gaps**: UI for calendar authorization (OAuth2). Sync settings UI. Logic to convert Interest to calendar event draft. User confirmation flow.";"Needs: `POST /api/users/calendar/authorize`, `POST /api/users/calendar/create-event`, `GET/PUT /api/users/calendar/settings`.";"Yes";"Seamless optional integration for users to add expressed Interests (events, bookings) to their personal calendars."
"MyEventsManagementScreen";"Producer (Leisure)";"25%";"**Linked to `MyProducerLeisureProfileScreen`.** \n**Functional (✅):** Basic event listing & creation form UI might exist (`myeventsmanagement_screen.dart`).\n**Needs Improvement (⚠️):** UI/UX polish. Robustness of event creation/editing forms. Filtering/sorting of managed events.\n**To Implement (❌):** Full CRUD for events linked to the producer. Advanced scheduling options (recurring events). Duplication feature. Publish/unpublish flow. View detailed stats per event (interests, choices, views - requires new API). Deep linking from `MyProducerLeisureProfileScreen` for quick edits. Integration with timed promotions for specific events.";"Primary event CRUD: `POST /api/events`, `PUT /api/events/{eventId}`, `DELETE /api/events/{eventId}` (all must be producer-scoped). `GET /api/leisureProducers/{producerId}/events` (for listing producer's events). Needs: API for event-specific stats (`GET /api/events/{eventId}/stats`).";"Yes";"Powerful and intuitive event management dashboard for Leisure Producers, fully integrated with their main profile. Full CRUD, scheduling, promotions, and performance analytics per event."